(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    485665,      10251]
NotebookOptionsPosition[    473267,      10045]
NotebookOutlinePosition[    473664,      10061]
CellTagsIndexPosition[    473621,      10058]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Vaje  za  3.  teden", "Title",
 CellChangeTimes->{{3.919309408005101*^9, 3.91930941615196*^9}, {
  3.919996378698812*^9, 3.919996378882624*^9}, {3.950252019021212*^9, 
  3.950252019121888*^9}},ExpressionUUID->"b1059ef0-fbac-4351-b8b5-\
fe69a5692763"],

Cell["6.  3.  2025", "Text",
 CellChangeTimes->{{3.919309422188853*^9, 3.919309429934455*^9}, {
  3.919996381114148*^9, 3.919996381998026*^9}, {3.950251890137534*^9, 
  3.950251892681402*^9}},ExpressionUUID->"7e568ee6-ede1-4ad7-b3fc-\
12c1699f12c8"],

Cell[CellGroupData[{

Cell["Naloga  0", "Section",
 CellChangeTimes->{{3.9193131211996317`*^9, 3.919313124548905*^9}, {
  3.919322081949431*^9, 3.919322082012895*^9}, {3.9502519064640837`*^9, 
  3.9502519067098513`*^9}},ExpressionUUID->"c159c23f-38af-450e-959e-\
4238adb34fbd"],

Cell["\<\
Napi\[SHacek]i  funkcijo quickSort, ki sprejme seznam in vrne urejen seznam. \
Za urejanje naj uporabi algoritem quick sort\
\>", "Text",
 CellChangeTimes->{{3.919321974718964*^9, 
  3.919322032589476*^9}},ExpressionUUID->"317ec6b2-4fba-479a-b764-\
8dbcb39d045f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.919408754950262*^9, 3.91940890956713*^9}, {
  3.919408946529557*^9, 3.9194090412308207`*^9}, {3.919593125328237*^9, 
  3.9195931263773403`*^9}},ExpressionUUID->"f45fbcd6-341a-41ab-8ad8-\
c0ea8057f557"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"quickSort", "[", "sez_", "]"}], " ", ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "sez", "]"}], " ", "<=", " ", "1"}], ",", " ", 
     "sez", ",", " ", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"sezManjse", ",", " ", "sezEnako", ",", " ", "sezVecje"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"sezManjse", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"sez", ",", " ", 
           RowBox[{
            RowBox[{"#", " ", "<", " ", 
             RowBox[{"First", "[", "sez", "]"}]}], " ", "&"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"sezEnako", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"sez", ",", " ", 
           RowBox[{
            RowBox[{"#", " ", "==", " ", 
             RowBox[{"First", "[", "sez", "]"}]}], " ", "&"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"sezVecje", " ", "=", " ", 
         RowBox[{"Select", "[", 
          RowBox[{"sez", ",", " ", 
           RowBox[{
            RowBox[{"#", " ", ">", " ", 
             RowBox[{"First", "[", "sez", "]"}]}], " ", "&"}]}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"quickSort", "[", "sezManjse", "]"}], ",", " ", "sezEnako", 
          ",", "  ", 
          RowBox[{"quickSort", "[", "sezVecje", "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.919343778234522*^9, 3.919343787540616*^9}, {
  3.919343840576065*^9, 3.919344061035421*^9}, {3.9193441000420933`*^9, 
  3.919344132927894*^9}, {3.919344203591992*^9, 3.919344226739705*^9}, {
  3.919344260421637*^9, 3.919344329598308*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"43aa2257-2ea2-48e1-942f-e6f9c9901bf0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"quickSort", "[", 
   RowBox[{"{", 
    RowBox[{
    "4", ",", " ", "2", ",", " ", "1", ",", " ", "6", ",", " ", "3", ",", " ",
      "5", ",", " ", "3", ",", " ", "9", ",", " ", "24"}], "}"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"seznam", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", "100", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "100"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"quickSort", "[", "seznam", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.919344140034746*^9, 3.9193441554292307`*^9}, {
  3.919348561280698*^9, 3.919348625313446*^9}, {3.919348674996188*^9, 
  3.919348688311545*^9}, {3.919348742598496*^9, 3.919348752837024*^9}, {
  3.919348832580558*^9, 3.919348841456183*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"34648430-eba5-4751-9ecb-785b92b9222d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  1", "Section",
 CellChangeTimes->{{3.9193115847112703`*^9, 3.919311588018684*^9}, {
  3.919322085644229*^9, 3.919322085750065*^9}, {3.9199966184836607`*^9, 
  3.9199966185559196`*^9}},ExpressionUUID->"95ae1cb0-793f-4738-ba37-\
8495cb33ccee"],

Cell["\<\
Napi\[SHacek]ite prepisovalno pravilo, ki bo izra\[CHacek]unalo produkt dve\
\[CHacek]lenika z dvo\[CHacek]lenikom. S tem pravilom poenostavi izraz (2x - \
4)(3 - 4y).\
\>", "Text",
 CellChangeTimes->{{3.919311592160357*^9, 3.919311612870406*^9}, {
   3.919312379097327*^9, 3.919312401350188*^9}, {3.91931294746025*^9, 
   3.919313029345149*^9}, 
   3.919344551906592*^9},ExpressionUUID->"f1e0cfbd-acf5-4bb7-9ea9-\
c95a6e8e3c22"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"distr", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a_", "*", 
      RowBox[{"(", 
       RowBox[{"b_", " ", "+", " ", "c_"}], ")"}]}], " ", ":>", " ", 
     RowBox[{
      RowBox[{"a", " ", "*", " ", "b"}], " ", "+", " ", 
      RowBox[{"a", " ", "*", " ", "c"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", "x"}], " ", "-", " ", "4"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"3", " ", "-", " ", 
     RowBox[{"4", "y"}]}], ")"}]}], " ", "//.", " ", "distr"}]}], "Input",
 CellChangeTimes->{{3.9193445818098593`*^9, 3.919344604658031*^9}, {
  3.9194002638893843`*^9, 3.919400264264077*^9}, {3.919999716441078*^9, 
  3.9199997573537693`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"b0b6121c-be29-4c01-84a2-225e154d8bca"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "12"}], "+", 
  RowBox[{"6", " ", "x"}], "+", 
  RowBox[{"16", " ", "y"}], "-", 
  RowBox[{"8", " ", "x", " ", "y"}]}]], "Output",
 CellChangeTimes->{{3.919344591831633*^9, 3.9193446060822887`*^9}, {
   3.919400253644133*^9, 3.919400268876565*^9}, 3.919996859822736*^9, {
   3.91999968156925*^9, 3.9199997582351723`*^9}},
 CellLabel->"Out[13]=",ExpressionUUID->"b30524b9-ae3a-4ab3-a4dc-00db48c03a49"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  2", "Section",
 CellChangeTimes->{{3.919998479450718*^9, 3.919998483346959*^9}, {
  3.9199993474254436`*^9, 
  3.919999347501218*^9}},ExpressionUUID->"4d7761ed-10f9-4931-b557-\
36737375a948"],

Cell["\<\
a) Definiraj funkcijo nakljucnaStevila, ki sprejme naravno \[SHacek]tevilo n \
in vrne seznam naklju\[CHacek]nih celih \[SHacek]tevil med -100 in 100 dol\
\[ZHacek]ine n.
c) S  pomo\[CHacek]jo  prepisovalnih  pravil implementiraj urejanje z mehur\
\[CHacek]ki (Bubble sort).\
\>", "Text",
 CellChangeTimes->{{3.919998486975778*^9, 3.9199985121747828`*^9}, {
  3.919999214043026*^9, 3.919999267100514*^9}, {3.919999568071307*^9, 
  3.919999657012591*^9}, {3.919999807603827*^9, 3.919999808399296*^9}, {
  3.91999992618636*^9, 3.9199999313238564`*^9}, {3.920001035216837*^9, 
  3.920001056370714*^9}},ExpressionUUID->"bbc1863b-74b2-4f29-b850-\
6def6252bc54"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"nakljucnaStevila", "[", "n_", "]"}], " ", ":=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "100"}], ",", " ", "100"}], "}"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "1", ",", " ", "n"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9199997821259127`*^9, 3.9199998386301813`*^9}, {
   3.919999888796912*^9, 3.919999914010412*^9}, 3.920001190924312*^9},
 CellLabel->"In[78]:=",ExpressionUUID->"796258d1-dbfe-44df-9957-5147ed77cc7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randints", " ", "=", " ", 
  RowBox[{"nakljucnaStevila", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.919999846333025*^9, 3.919999852082775*^9}, {
   3.9199999896579103`*^9, 3.919999997563078*^9}, 3.920000905567725*^9},
 CellLabel->"In[79]:=",ExpressionUUID->"e6e40f69-4cc1-4efd-a4ae-aea318a5174c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "8"}], ",", "81", ",", 
   RowBox[{"-", "82"}], ",", 
   RowBox[{"-", "82"}], ",", "49", ",", "22", ",", "63", ",", "47", ",", "28",
    ",", "67"}], "}"}]], "Output",
 CellChangeTimes->{
  3.919999853139389*^9, {3.919999904690814*^9, 3.919999917154524*^9}, 
   3.919999999094636*^9, 3.920000908533441*^9, 3.9200010693649387`*^9, {
   3.9200011648987513`*^9, 3.920001193331099*^9}},
 CellLabel->"Out[79]=",ExpressionUUID->"c131374c-1cf7-436b-8346-9397a80955f0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"prepZamenjaj", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a___", ",", " ", "b_", ",", " ", "c_", ",", " ", "d___"}], 
      "}"}], " ", "/;", " ", 
     RowBox[{"b", " ", ">", " ", "c"}]}], " ", ":>", " ", 
    RowBox[{"{", 
     RowBox[{"a", ",", " ", "c", ",", " ", "b", ",", " ", "d"}], "}"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.919999940936648*^9, 3.919999979482046*^9}, {
  3.920000019129447*^9, 3.920000040446658*^9}, {3.920000796128516*^9, 
  3.920000800656238*^9}, {3.92000083151542*^9, 3.920000840956501*^9}, {
  3.920000875166593*^9, 3.9200008760825357`*^9}, {3.920000988027083*^9, 
  3.920000994653224*^9}, {3.920001088016241*^9, 3.920001096440238*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"3ff330ef-b7e2-45aa-9976-8be76c3e5efe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randints", " ", "//.", " ", "prepZamenjaj"}]], "Input",
 CellChangeTimes->{{3.920001000814026*^9, 3.920001021666506*^9}, 
   3.920001081288679*^9, 3.920001156760338*^9},
 CellLabel->"In[81]:=",ExpressionUUID->"42cfbb2d-168c-47bc-89c9-7e67150e7da3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "82"}], ",", 
   RowBox[{"-", "82"}], ",", 
   RowBox[{"-", "8"}], ",", "22", ",", "28", ",", "47", ",", "49", ",", "63", 
   ",", "67", ",", "81"}], "}"}]], "Output",
 CellChangeTimes->{{3.92000100661141*^9, 3.920001022497504*^9}, 
   3.9200011003177147`*^9, {3.920001157753779*^9, 3.920001196175273*^9}},
 CellLabel->"Out[81]=",ExpressionUUID->"e8549cb7-bff7-462d-a7a4-e3325dc74319"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  3", "Section",
 CellChangeTimes->{{3.91934194817379*^9, 3.919341952499741*^9}, {
  3.919996619904434*^9, 3.919996620215748*^9}, {3.9199994788974867`*^9, 
  3.919999479029854*^9}},ExpressionUUID->"050253b4-28d8-440a-9515-\
c847daabc761"],

Cell["\<\
- Definiraj funkcijo ZadnjaStevka, ki kot argument sprejme naravno \
\[SHacek]tevilo n in vrne zadnjo \[SHacek]tevko \[SHacek]tevila n. \
(ZadnjaStevka(8138719) vrne 9)
- Definiraj funkcijo PrvaStevka, ki kot argument sprejme naravno \
\[SHacek]tevilo n in vrne prvo \[SHacek]tevko \[SHacek]tevila n. \
(PrvaStevka(8138719) vrne 8)
- Definiraj funkcijo Parabola, ki sprejme koeficiente parabole a, b in c in \
nari\[SHacek]e graf parabole ax^2 + bx + c. Graf naj bo narisan tako, da bo \
teme parabole vedno vidno na sliki.\
\>", "Text",
 CellChangeTimes->{{3.919341977707533*^9, 3.919342198124765*^9}, {
  3.920001341072845*^9, 
  3.920001349681974*^9}},ExpressionUUID->"20070092-6fb9-4e4a-8e1a-\
d0a625226068"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ZadnjaStevka", "[", "n_Integer", "]"}], " ", ":=", " ", 
   RowBox[{"Mod", "[", 
    RowBox[{"n", ",", " ", "10"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PrvaStevka", "[", "n_Integer", "]"}], " ", ":=", " ", 
   RowBox[{"Floor", "[", 
    RowBox[{
     RowBox[{"Abs", "[", "n", "]"}], " ", "/", " ", 
     RowBox[{"10", "^", 
      RowBox[{"Floor", "[", 
       RowBox[{"Log10", "[", 
        RowBox[{"Abs", "[", "n", "]"}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Parabola", "[", 
    RowBox[{"a_", ",", " ", "b_", ",", " ", "c_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", 
       RowBox[{"x", "^", "2"}]}], " ", "+", " ", 
      RowBox[{"b", " ", "x"}], " ", "+", " ", "c"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "b"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", "a"}], ")"}]}], " ", "-", " ", "1"}], ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "b"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", "a"}], ")"}]}], " ", "+", " ", "1"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ZadnjaStevka", "[", "8138719", "]"}], "\[IndentingNewLine]", 
 RowBox[{"PrvaStevka", "[", "8138719", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Parabola", "[", 
  RowBox[{"1", ",", " ", "3", ",", " ", "2"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9193446321474457`*^9, 3.919344672609912*^9}, {
  3.9193447255317173`*^9, 3.919344877054799*^9}, {3.919345014583792*^9, 
  3.919345106233627*^9}, {3.919593185613562*^9, 3.919593186152952*^9}, {
  3.920001276694915*^9, 3.920001315479257*^9}, {3.920001354785429*^9, 
  3.92000151961474*^9}, {3.920002319826968*^9, 3.92000232363159*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"22cf30f2-2d19-4634-95fe-9f21481bf10b"],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{
  3.919344821555045*^9, {3.919345054040457*^9, 3.919345106842764*^9}, 
   3.9199968600502977`*^9, 3.920001233535055*^9, {3.920001277172488*^9, 
   3.9200013165192842`*^9}, {3.9200013622285643`*^9, 3.920001520041144*^9}, 
   3.920001576057968*^9, {3.9200023284116373`*^9, 3.920002329605113*^9}},
 CellLabel->
  "Out[299]=",ExpressionUUID->"229e67b7-23f3-4714-91e7-02d52141698d"],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{
  3.919344821555045*^9, {3.919345054040457*^9, 3.919345106842764*^9}, 
   3.9199968600502977`*^9, 3.920001233535055*^9, {3.920001277172488*^9, 
   3.9200013165192842`*^9}, {3.9200013622285643`*^9, 3.920001520041144*^9}, 
   3.920001576057968*^9, {3.9200023284116373`*^9, 3.920002329606658*^9}},
 CellLabel->
  "Out[300]=",ExpressionUUID->"b4e5aacc-936d-4b22-81e8-12d4a91189e8"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1:eJwtmHlYjO/3x6dFC2EktFGyp9IHka1nSmWJJFSUSovIVrQQKkub9qJNmz4o
iTZLqzMt2mee+RBpkSnVtGrRLO3f87uu319zva5zn3Pe59znvp/nmdV210wd
hSkUirQQhfJ/vw3hfpNzcyJ0F2+1xrk5DmE1K2H3aVaEbvHBuOUvl0MMXg6p
vTMjQr+Z6+LWN8AhFh6OjpuYFKHbjuY7NDdxCGPRZzv+ckXovbE7tRqyOQTr
Zsn1ngEReqrPtpgZGw7x7dzf/oYmEXpB4Yx5eFkP0b7tXGt8Ntp/tLZcDeom
tLj3vVwsMN81J8Uzk52E+IjC54XiInSqir/+rVw2MSTvWrb/ozB9pK5eyEb+
JyFrL3Xng60wXTM0b8uKNz+IT12rOocXC9OVTxXF7KU3Eq8eeIqdLxCi0+RS
pckCFpFuGtLmZidEp4RZx7ZN1xLKlrLWh6WF6L6S0dcuu1QQ7b79SVbFFDpd
VNV7WUQhsYK9LUjLmUL39fI90T30mnC4tmt9ujyFTjmiazY294gY3Dlf5HXg
HFBku+ATLxHERCOoTzizkJoS3v7wRA5kzk9LEGjPgvLzkwteHygEd1e1wNDQ
GYh4JVQi94QOO4xeNGQPTUPOsniTvpYKuGeTGWpEmwZK+eeWT7wqSFafv7Vy
3zSMBJRk3RaqhpKpi9/37pkGF8l8ua1S1cCL3aSksQP9dVIqg1dXgzMrI4eq
Ng3UG27WY0bVYKqb/vXbimmgCUunhaRUg8qa53K2w1NAKZa7yNWtgfKepBdu
yVNAi7Hkxd6ohdru4S0fn05BhEFKpffdWmB16RZNxE0Be/83qnVALfzq7GZ6
R0+BibrsGrGntTDdri4IDJyCkfwJjemyWtBqKj2cdB3jhW/u8llUBxnVP4c/
G06Brffhyu5ndZBdtcVLQn8KfKV+mLRl1sGHz/dEjXQxX5+5ZX1+HVRWrJNj
7ZmCnAiN/qjPddABV/RaNDFf1M7h6t46kC+YefxHfgpY9gUxter1EJqxcveK
4UkwIdwtN+fVg0zQTND5wUmgLTU0kSqqh8SLP5vf902CS5m9RE9ZPWSpJt06
2TUJmll+5Q/+q4eGLMXCyOZJoBfbW18YqYf5uQraUpWTQKkI3P5drQH8C+V2
CMXjelePM/qpDbAoYcLPJGYSfB91FuxLb4AYr+ZvKdG43vtpy5a3DfBiT7y7
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
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJwtmHlYjO/3x6dFC2EktFGyp9IHka1nSmWJJFSUSovIVrQQKkub9qJNmz4o
iTZLqzMt2mee+RBpkSnVtGrRLO3f87uu319zva5zn3Pe59znvp/nmdV210wd
hSkUirQQhfJ/vw3hfpNzcyJ0F2+1xrk5DmE1K2H3aVaEbvHBuOUvl0MMXg6p
vTMjQr+Z6+LWN8AhFh6OjpuYFKHbjuY7NDdxCGPRZzv+ckXovbE7tRqyOQTr
Zsn1ngEReqrPtpgZGw7x7dzf/oYmEXpB4Yx5eFkP0b7tXGt8Ntp/tLZcDeom
tLj3vVwsMN81J8Uzk52E+IjC54XiInSqir/+rVw2MSTvWrb/ozB9pK5eyEb+
JyFrL3Xng60wXTM0b8uKNz+IT12rOocXC9OVTxXF7KU3Eq8eeIqdLxCi0+RS
pckCFpFuGtLmZidEp4RZx7ZN1xLKlrLWh6WF6L6S0dcuu1QQ7b79SVbFFDpd
VNV7WUQhsYK9LUjLmUL39fI90T30mnC4tmt9ujyFTjmiazY294gY3Dlf5HXg
HFBku+ATLxHERCOoTzizkJoS3v7wRA5kzk9LEGjPgvLzkwteHygEd1e1wNDQ
GYh4JVQi94QOO4xeNGQPTUPOsniTvpYKuGeTGWpEmwZK+eeWT7wqSFafv7Vy
3zSMBJRk3RaqhpKpi9/37pkGF8l8ua1S1cCL3aSksQP9dVIqg1dXgzMrI4eq
Ng3UG27WY0bVYKqb/vXbimmgCUunhaRUg8qa53K2w1NAKZa7yNWtgfKepBdu
yVNAi7Hkxd6ohdru4S0fn05BhEFKpffdWmB16RZNxE0Be/83qnVALfzq7GZ6
R0+BibrsGrGntTDdri4IDJyCkfwJjemyWtBqKj2cdB3jhW/u8llUBxnVP4c/
G06Brffhyu5ndZBdtcVLQn8KfKV+mLRl1sGHz/dEjXQxX5+5ZX1+HVRWrJNj
7ZmCnAiN/qjPddABV/RaNDFf1M7h6t46kC+YefxHfgpY9gUxter1EJqxcveK
4UkwIdwtN+fVg0zQTND5wUmgLTU0kSqqh8SLP5vf902CS5m9RE9ZPWSpJt06
2TUJmll+5Q/+q4eGLMXCyOZJoBfbW18YqYf5uQraUpWTQKkI3P5drQH8C+V2
CMXjelePM/qpDbAoYcLPJGYSfB91FuxLb4AYr+ZvKdG43vtpy5a3DfBiT7y7
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
              "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|"PanelPlotLayout" -> <||>, "PlotRange" -> {{
              Rational[-5, 2], 
              Rational[-1, 2]}, {-0.24999997630567083`, 0.7499999183673491}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {-0.45833333333333437`, 0}, 
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
           "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
           "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|"PanelPlotLayout" -> <||>, "PlotRange" -> {{
             Rational[-5, 2], 
             Rational[-1, 2]}, {-0.24999997630567083`, 0.7499999183673491}}, 
          "Frame" -> {{False, False}, {False, False}}, 
          "AxesOrigin" -> {-0.45833333333333437`, 0}, 
          "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1:eJwtmHlYjO/3x6dFC2EktFGyp9IHka1nSmWJJFSUSovIVrQQKkub9qJNmz4o
iTZLqzMt2mee+RBpkSnVtGrRLO3f87uu319zva5zn3Pe59znvp/nmdV210wd
hSkUirQQhfJ/vw3hfpNzcyJ0F2+1xrk5DmE1K2H3aVaEbvHBuOUvl0MMXg6p
vTMjQr+Z6+LWN8AhFh6OjpuYFKHbjuY7NDdxCGPRZzv+ckXovbE7tRqyOQTr
Zsn1ngEReqrPtpgZGw7x7dzf/oYmEXpB4Yx5eFkP0b7tXGt8Ntp/tLZcDeom
tLj3vVwsMN81J8Uzk52E+IjC54XiInSqir/+rVw2MSTvWrb/ozB9pK5eyEb+
JyFrL3Xng60wXTM0b8uKNz+IT12rOocXC9OVTxXF7KU3Eq8eeIqdLxCi0+RS
pckCFpFuGtLmZidEp4RZx7ZN1xLKlrLWh6WF6L6S0dcuu1QQ7b79SVbFFDpd
VNV7WUQhsYK9LUjLmUL39fI90T30mnC4tmt9ujyFTjmiazY294gY3Dlf5HXg
HFBku+ATLxHERCOoTzizkJoS3v7wRA5kzk9LEGjPgvLzkwteHygEd1e1wNDQ
GYh4JVQi94QOO4xeNGQPTUPOsniTvpYKuGeTGWpEmwZK+eeWT7wqSFafv7Vy
3zSMBJRk3RaqhpKpi9/37pkGF8l8ua1S1cCL3aSksQP9dVIqg1dXgzMrI4eq
Ng3UG27WY0bVYKqb/vXbimmgCUunhaRUg8qa53K2w1NAKZa7yNWtgfKepBdu
yVNAi7Hkxd6ohdru4S0fn05BhEFKpffdWmB16RZNxE0Be/83qnVALfzq7GZ6
R0+BibrsGrGntTDdri4IDJyCkfwJjemyWtBqKj2cdB3jhW/u8llUBxnVP4c/
G06Brffhyu5ndZBdtcVLQn8KfKV+mLRl1sGHz/dEjXQxX5+5ZX1+HVRWrJNj
7ZmCnAiN/qjPddABV/RaNDFf1M7h6t46kC+YefxHfgpY9gUxter1EJqxcveK
4UkwIdwtN+fVg0zQTND5wUmgLTU0kSqqh8SLP5vf902CS5m9RE9ZPWSpJt06
2TUJmll+5Q/+q4eGLMXCyOZJoBfbW18YqYf5uQraUpWTQKkI3P5drQH8C+V2
CMXjelePM/qpDbAoYcLPJGYSfB91FuxLb4AYr+ZvKdG43vtpy5a3DfBiT7y7
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
          "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|"PanelPlotLayout" -> <||>, "PlotRange" -> {{
          Rational[-5, 2], 
          Rational[-1, 2]}, {-0.24999997630567083`, 0.7499999183673491}}, 
       "Frame" -> {{False, False}, {False, False}}, 
       "AxesOrigin" -> {-0.45833333333333437`, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.45833333333333437`, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->NCache[{{
      Rational[-5, 2], 
      Rational[-1, 2]}, {-0.24999997630567083`, 
     0.7499999183673491}}, {{-2.5, -0.5}, {-0.24999997630567083`, 
    0.7499999183673491}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.919344821555045*^9, {3.919345054040457*^9, 3.919345106842764*^9}, 
   3.9199968600502977`*^9, 3.920001233535055*^9, {3.920001277172488*^9, 
   3.920001316519284*^9}, {3.920001362228565*^9, 3.920001520041144*^9}, 
   3.920001576057968*^9, {3.920002328411638*^9, 3.920002329642211*^9}},
 CellLabel->
  "Out[301]=",ExpressionUUID->"51498ae9-cbf1-46a0-b920-8d74fa02a683"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  4", "Section",
 CellChangeTimes->{{3.919342200345504*^9, 3.9193422034770727`*^9}, {
  3.919996623038353*^9, 3.919996623122765*^9}, {3.919999481344521*^9, 
  3.919999481426112*^9}},ExpressionUUID->"41d21403-a04a-4f2c-b37b-\
968c7f0ac171"],

Cell["\<\
Definiraj naslednje sezname:
- {1/(2^20), 1/(2^19), ..., 1/2, 1, 2, 4, 8, ..., 2^24}
- {{}, {1}, {2}, {3}, ..., {99}, {99}, {98}, ..., {2}, {1}, {}}
- seznam dol\[ZHacek]ine 100, v katerem je vsak naslednji element za eno \
mesto bolj natan\[CHacek]en pribli\[ZHacek]ek \[SHacek]tevila \[Pi]. ({3, \
3.1, 3.14, ...})\
\>", "Text",
 CellChangeTimes->{{3.9193422082485933`*^9, 
  3.919342476057444*^9}},ExpressionUUID->"dffccb33-fe4d-41fe-a1fd-\
4315b1baf132"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "n_", "]"}], " ", ":=", " ", 
   RowBox[{"2", "^", "n"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"f", "[", "i", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", 
      RowBox[{"-", "20"}], ",", " ", "24"}], "}"}]}], "]"}], ";"}]}], "Input",\

 CellChangeTimes->{{3.919345182535432*^9, 3.919345250576545*^9}, 
   3.920001621427437*^9, 3.920001717968111*^9},
 CellLabel->
  "In[270]:=",ExpressionUUID->"320f1dd9-893a-425b-a315-ff9aa2f337d7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "n_", "]"}], " ", ":=", " ", 
   RowBox[{"Piecewise", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", " ", 
        RowBox[{"n", "==", "0"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "n", "}"}], ",", " ", 
        RowBox[{"n", " ", "!=", " ", "0"}]}], "}"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tmp", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"f", "[", "i", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "0", ",", " ", "99"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Join", "[", 
   RowBox[{"tmp", ",", " ", 
    RowBox[{"Reverse", "[", "tmp", "]"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.919345256775662*^9, 3.919345302374606*^9}, {
   3.919345345289*^9, 3.919345447743024*^9}, 3.920001652852544*^9, 
   3.920001715115114*^9},
 CellLabel->
  "In[267]:=",ExpressionUUID->"e4972d5d-2c96-4a5f-a387-a6170d9cf999"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], " ", ":=", " ", 
  RowBox[{"N", "[", 
   RowBox[{"\[Pi]", ",", " ", "n"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"f", "[", "i", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "1", ",", " ", "100"}], "}"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.919345454722183*^9, 3.91934546900385*^9}, {
   3.9193455369799953`*^9, 3.919345580738096*^9}, 3.9200016745008917`*^9, 
   3.9200017108571587`*^9},
 CellLabel->
  "In[265]:=",ExpressionUUID->"fbf9b13d-195b-4349-b10e-6e2d61f4cd96"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  5", "Section",
 CellChangeTimes->{{3.9193425282015543`*^9, 3.919342531850402*^9}, {
  3.9199966253831053`*^9, 3.9199966254291143`*^9}, {3.919999483146052*^9, 
  3.919999483244091*^9}},ExpressionUUID->"37655d52-a1b3-4408-9591-\
8b0a22cc0d5c"],

Cell["\<\
Definiraj funkcijo, ki je za pozitivne x enaka sin(x)/x, za x manj\[SHacek]i \
ali enak 0 pa je enaka cos(x). Pomagaj si s funkcijo `Piecewise`. Nari\
\[SHacek]i njen graf na intervalu [-6, 6].\
\>", "Text",
 CellChangeTimes->{{3.919342737164658*^9, 3.919342837387774*^9}, 
   3.9193436257895737`*^9, {3.9193456674812117`*^9, 3.91934568167251*^9}, {
   3.9193457742361*^9, 
   3.919345776273199*^9}},ExpressionUUID->"cb1e7497-e2fe-4b4d-8a91-\
1c5b2901b537"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], " ", ":=", " ", 
   RowBox[{"Piecewise", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], ",", " ", 
        RowBox[{"x", ">", "0"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
        RowBox[{"x", " ", "<=", " ", "0"}]}], "}"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "6"}], ",", " ", "6"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.919345685085631*^9, 3.919345780701551*^9}},
 CellLabel->
  "In[272]:=",ExpressionUUID->"aed88f6b-8c9a-4360-b530-5d7b9a79ef41"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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
TrnAtg==
          "]], LineBox[CompressedData["
1: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
74VvzsaOz+KoxUUGUIGD0pOdWfh/e4wbtw==
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], {}}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1: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
TrnAtg==
              "]], 
             Line[CompressedData["
1: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
74VvzsaOz+KoxUUGUIGD0pOdWfh/e4wbtw==
              "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{-6, 6}, {-0.999998724135768, 0.9999975596123655}},
            "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{-6, 6}, {-0.999998724135768, 0.9999975596123655}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
TrnAtg==
          "]], 
         Line[CompressedData["
1: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
74VvzsaOz+KoxUUGUIGD0pOdWfh/e4wbtw==
          "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{-6, 6}, {-0.999998724135768, 0.9999975596123655}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6, 6}, {-0.999998724135768, 0.9999975596123655}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.919345769312274*^9, 3.919345781528026*^9}, 
   3.919996860244783*^9, 3.920001742255583*^9},
 CellLabel->
  "Out[273]=",ExpressionUUID->"fbb3258e-c798-433c-a38b-49a28417ddf2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  6", "Section",
 CellChangeTimes->{{3.919343206074123*^9, 3.919343210538501*^9}, {
  3.919996628272656*^9, 3.9199966283249073`*^9}, {3.919999485417779*^9, 
  3.919999485526772*^9}},ExpressionUUID->"9059f268-88ed-46fa-9f80-\
f2f54b64459f"],

Cell[TextData[{
 "Dano je zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], 
          StyleBox["n", "TI"]], "\[LongEqual]", 
         SuperscriptBox[
          RowBox[{"(", 
            FractionBox[
             RowBox[{"2", 
               SuperscriptBox[
                StyleBox["n", "TI"], "2"], "+", 
               StyleBox["n", "TI"], "+", "1"}], 
             RowBox[{"2", 
               SuperscriptBox[
                StyleBox["n", "TI"], "2"], "-", "1"}]], ")"}], 
          RowBox[{"-", 
            SuperscriptBox[
             StyleBox["n", "TI"], "2"]}]]}], TraditionalForm], "errors" -> {},
      "input" -> "a_n = \\left(\\frac{2n^2 + n + 1}{2n^2 -1}\\right)^{-n^2}", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "ccd091b4-83c4-4c6b-8430-2854ce048ccc"],
 " \na) V Mathematici definiraj zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SubscriptBox[
        StyleBox["a", "TI"], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "f2d2421f-9d5a-41be-b3fa-6c57ce877aec"],
 ".\nb) Definiraj seznam, ki vrne prvih 30 \[CHacek]lenov zaporedja.\nc) Nari\
\[SHacek]ite graf zaporedja (prvih 30 \[CHacek]lenov).\nd) Izra\[CHacek]unaj \
limito zaporedja ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SubscriptBox[
        StyleBox["a", "TI"], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "33cd6c53-bfce-4ae0-abcc-28dc63844ed0"],
 ". Izra\[CHacek]unaj tudi limito zaporedja ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RadicalBox[
        SubscriptBox[
         StyleBox["a", "TI"], 
         StyleBox["n", "TI"]], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "\\sqrt[n]{a_n}", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "cdcfe898-1d1c-401e-b786-4638658f988d"],
 ". Ali vrsta ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubsuperscriptBox["\[CapitalSigma]", 
          RowBox[{
            StyleBox["n", "TI"], "\[LongEqual]", "1"}], "\[Infinity]"], 
         SubscriptBox[
          StyleBox["a", "TI"], 
          StyleBox["n", "TI"]]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\Sigma_{n=1}^\\infty a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "1e70c8e6-144d-4c96-af6d-e70e804cb2e3"],
 " konvergira?\ne) Izra\[CHacek]unaj numeri\[CHacek]ni pribli\[ZHacek]ek \
vsote vrste ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubsuperscriptBox["\[CapitalSigma]", 
          RowBox[{
            StyleBox["n", "TI"], "\[LongEqual]", "1"}], "\[Infinity]"], 
         SubscriptBox[
          StyleBox["a", "TI"], 
          StyleBox["n", "TI"]]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\Sigma_{n=1}^\\infty a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "1bdb1e47-8751-40ff-861a-ee7f7790f5c2"],
 " (uporabi NSum)."
}], "Text",
 CellChangeTimes->{{3.919343217215786*^9, 3.919343244079322*^9}, {
  3.9193432929934053`*^9, 3.919343598416095*^9}, {3.919345848877409*^9, 
  3.919345864900295*^9}, {3.919346072106433*^9, 
  3.919346077692441*^9}},ExpressionUUID->"09c2cc28-ce83-4e5a-ae08-\
b7e193d44db1"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"a", ",", " ", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.920001783146578*^9, 3.920001792088929*^9}, {
  3.920001998654866*^9, 3.920001999167693*^9}},
 CellLabel->
  "In[334]:=",ExpressionUUID->"cdf0d52a-f2a4-44a7-9fc3-c00c88d5a0fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"a", "[", "n_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", 
         RowBox[{"n", "^", "2"}]}], " ", "+", " ", "n", " ", "+", " ", "1"}], 
       ")"}], " ", "/", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", 
         RowBox[{"n", "^", "2"}]}], "-", "1"}], ")"}]}], ")"}], "^", 
    RowBox[{"(", " ", 
     RowBox[{"-", 
      RowBox[{"n", "^", "2"}]}], ")"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.919345812709559*^9, 3.9193458172693*^9}, {
  3.919345870845365*^9, 3.919345923955107*^9}, {3.919345985225671*^9, 
  3.9193460109624643`*^9}, {3.9193479910323687`*^9, 3.919347995180293*^9}, {
  3.919996722440322*^9, 3.9199967876734743`*^9}, {3.919996817730987*^9, 
  3.919996818154058*^9}, {3.919997030478092*^9, 3.919997050949834*^9}, {
  3.92000176453351*^9, 3.9200017699573927`*^9}, {3.920002024492557*^9, 
  3.920002025481318*^9}, {3.920002170359494*^9, 3.920002186575433*^9}, {
  3.9200024934623823`*^9, 3.920002494184754*^9}, {3.92000310003198*^9, 
  3.920003102243279*^9}, {3.920003166213977*^9, 3.9200032527401333`*^9}},
 CellLabel->
  "In[354]:=",ExpressionUUID->"85d94bec-9dcb-4754-8b50-76431b6f2f30"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"prvih30", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"a", "[", "i", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "1", ",", " ", "30"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"N", " ", "/@", " ", "prvih30"}]}], "Input",
 CellChangeTimes->{{3.919345935216415*^9, 3.919345946807891*^9}, 
   3.919346031757513*^9, {3.919346084597732*^9, 3.919346086939564*^9}, 
   3.919996659206942*^9, {3.91999679907655*^9, 3.919996828019238*^9}, {
   3.919997057980157*^9, 3.9199970590500174`*^9}, {3.919997093397456*^9, 
   3.9199970938575993`*^9}, {3.920002534083001*^9, 3.920002549285943*^9}, 
   3.92000262729342*^9, {3.920003112084443*^9, 3.9200031236742973`*^9}},
 CellLabel->
  "In[355]:=",ExpressionUUID->"3054748c-2294-428a-8fd6-8935ce669b7e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.25`", ",", "0.16399153063315347`", ",", "0.09822819529341421`", ",", 
   "0.05896027714542161`", ",", "0.03549779079325702`", ",", 
   "0.021415354476635402`", ",", "0.012936821357057435`", ",", 
   "0.007822072611952557`", ",", "0.004732512383703244`", ",", 
   "0.0028645876234110017`", ",", "0.00173453249560824`", ",", 
   "0.0010505525086917608`", ",", "0.0006364189745306381`", ",", 
   "0.00038560285561415876`", ",", "0.0002336659711202406`", ",", 
   "0.00014161145776250958`", ",", "0.00008583036058879542`", ",", 
   "0.000052025558091518526`", ",", "0.00003153702758564499`", ",", 
   "0.00001911828263994923`", ",", "0.00001159038254026588`", ",", 
   "7.026914759033103`*^-6", ",", "4.260370197470055`*^-6", ",", 
   "2.5831154258339393`*^-6", ",", "1.5662190179434905`*^-6", ",", 
   "9.496684367890677`*^-7", ",", "5.758391255723365`*^-7", ",", 
   "3.4917165293104523`*^-7", ",", "2.1173105217477305`*^-7", ",", 
   "1.2839175622846646`*^-7"}], "}"}]], "Output",
 CellChangeTimes->{{3.919996659611726*^9, 3.919996695533453*^9}, 
   3.9199968002559977`*^9, 3.919996860282967*^9, {3.919997037320609*^9, 
   3.919997059517528*^9}, 3.919997094695505*^9, {3.920001798258458*^9, 
   3.920001812992157*^9}, {3.920002007721644*^9, 3.9200020276829023`*^9}, {
   3.920002191715364*^9, 3.920002199592224*^9}, {3.920002529939877*^9, 
   3.9200025808985577`*^9}, {3.920002614342843*^9, 3.9200026276378717`*^9}, 
   3.9200030523553963`*^9, {3.920003108077614*^9, 3.920003124486884*^9}, 
   3.9200031805535727`*^9, 3.9200032606179943`*^9},
 CellLabel->
  "Out[356]=",ExpressionUUID->"97403ea6-83b9-4b12-bab8-82d3d667b0dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ListPlot", "[", "prvih30", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"DiscretePlot", "[", 
  RowBox[{
   RowBox[{"a", "[", "n", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"n", ",", " ", "1", ",", " ", "30"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.919346036707563*^9, 3.919346056739122*^9}, {
   3.919346091420005*^9, 3.919346098387097*^9}, 3.9199966380704193`*^9, {
   3.920003284821971*^9, 3.920003313868959*^9}, {3.9200033828197527`*^9, 
   3.92000338325852*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"cd43bfee-4c97-45ef-9d21-329ffce3e398"],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[2], 
     TagBox[{
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.011000000000000001`], AbsoluteThickness[2], Opacity[0.2], LineBox[{},
         VertexColors->None]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.011000000000000001`], AbsoluteThickness[2], Opacity[0.2], 
        LineBox[{{{1., 0.25}, {1., 0}}, {{2., 0.16399153063315347`}, {
           2., 0}}, {{3., 0.09822819529341421}, {3., 0}}, {{4., 
           0.05896027714542161}, {4., 0}}, {{5., 0.03549779079325702}, {
           5., 0}}, {{6., 0.021415354476635402`}, {6., 0}}, {{7., 
           0.012936821357057435`}, {7., 0}}, {{8., 0.007822072611952557}, {
           8., 0}}, {{9., 0.004732512383703244}, {9., 0}}, {{10., 
           0.0028645876234110017`}, {10., 0}}, {{11., 0.00173453249560824}, {
           11., 0}}, {{12., 0.0010505525086917608`}, {12., 0}}, {{13., 
           0.0006364189745306381}, {13., 0}}, {{14., 
           0.00038560285561415876`}, {14., 0}}, {{15., 
           0.0002336659711202406}, {15., 0}}, {{16., 
           0.00014161145776250958`}, {16., 0}}, {{17., 
           0.00008583036058879542}, {17., 0}}, {{18., 
           0.000052025558091518526`}, {18., 0}}, {{19., 
           0.00003153702758564499}, {19., 0}}, {{20., 
           0.00001911828263994923}, {20., 0}}, {{21., 
           0.00001159038254026588}, {21., 0}}, {{22., 
           7.026914759033103*^-6}, {22., 0}}, {{23., 4.260370197470055*^-6}, {
           23., 0}}, {{24., 2.5831154258339393`*^-6}, {24., 0}}, {{25., 
           1.5662190179434905`*^-6}, {25., 0}}, {{26., 
           9.496684367890677*^-7}, {26., 0}}, {{27., 5.758391255723365*^-7}, {
           27., 0}}, {{28., 3.4917165293104523`*^-7}, {28., 0}}, {{29., 
           2.1173105217477305`*^-7}, {29., 0}}, {{30., 
           1.2839175622846646`*^-7}, {30., 0}}},
         VertexColors->None]}},
      Annotation[#, "Charting`Private`Tag$15685#1"]& ]}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[2], {}, 
      PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQDQEf7CH0BSjN4HDre+GqNX+PQPkcDp39IcuqVXdC
+QIO+yaZzOEyWAflizi0iAubHtFZBOVLOExiLZB58XYqlC/j4BqrcnReXReU
r+DgYFx4gYW1AcpXcjCYs1wuLakYyldxuKEufrSyPB3KV3NQ9X0tqpEdA+Vr
OGSF7tQKMwuE8rUc+mUDw1ffcoHydRxO9xUvD3e1hPL1HH57tGW0L9CD8g0c
DELua2zsV4LyDR36Dd/H/qoXg/KNHKyjGicccOOG8o0ddnd5slzpYIDyTRys
bXkT2Xi+2EH4pg6dNz5xd/m9gPLNHFiTOOeLV96F8s0dklTbl3TeuwjlWzj8
fKO502j1USjf0sG9ZCbrHbddUL6VQ32/469pd9dD+dYOut6vF2QHLYbybRya
rjRq78ybDuXbOjivusbOlt0D5ds5MLAevNJo3WgHAODodJ8=
       "]], {}},
     Annotation[#, "Charting`Private`Tag$15685#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{1, 0},
  DisplayFunction->Identity,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "MessagesHead" -> DiscretePlot, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05]},
  PlotRange->{{1, 30}, {0, 0.05353603686306159}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.9199966404127607`*^9, 3.9199966518717337`*^9}, 
   3.919996860314454*^9, 3.919999407628785*^9, 3.9200026343975477`*^9, 
   3.920003128247654*^9, 3.9200031826596003`*^9, {3.9200032904081373`*^9, 
   3.920003314644951*^9}, 3.920003383856818*^9},
 CellLabel->
  "Out[366]=",ExpressionUUID->"ab12a133-0ae2-4450-b2b6-1a872b95a7f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiscreteLimit", "[", 
  RowBox[{
   RowBox[{"a", "[", "n", "]"}], ",", " ", 
   RowBox[{"n", " ", "->", " ", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.91934610674399*^9, 3.91934610872042*^9}, {
   3.919347499197228*^9, 3.919347542372808*^9}, 3.919999451006062*^9, {
   3.92000304003651*^9, 3.920003041650096*^9}, {3.920003155023535*^9, 
   3.920003155828767*^9}, {3.920003188331295*^9, 3.920003211112677*^9}, {
   3.920003255179328*^9, 3.92000325540476*^9}},
 CellLabel->
  "In[364]:=",ExpressionUUID->"490768f6-9616-4311-a205-6a005c5a5575"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.919999451344792*^9, 3.9199994698872843`*^9}, {
   3.9200026375950327`*^9, 3.920002652386331*^9}, 3.920003043909493*^9, {
   3.920003131419763*^9, 3.9200032623468246`*^9}, 3.920003379511787*^9},
 CellLabel->
  "Out[364]=",ExpressionUUID->"5e0e080e-4024-4369-8424-aa5739331b94"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiscreteLimit", "[", 
  RowBox[{
   RowBox[{"Power", "[", 
    RowBox[{
     RowBox[{"a", "[", "n", "]"}], ",", " ", 
     RowBox[{"1", "/", "n"}]}], "]"}], ",", " ", 
   RowBox[{"n", " ", "->", " ", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.919347554703622*^9, 3.919347579296638*^9}, {
  3.920003406744843*^9, 3.920003413219675*^9}},
 CellLabel->
  "In[373]:=",ExpressionUUID->"60d3bfe4-1369-4711-aa9d-644eb5b4b746"],

Cell[BoxData[
 FractionBox["1", 
  SqrtBox["\[ExponentialE]"]]], "Output",
 CellChangeTimes->{3.920003441426496*^9},
 CellLabel->
  "Out[373]=",ExpressionUUID->"c0f229f3-3829-493e-bf8f-8f75a3853489"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", " ", "//", " ", "N", "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Po", " ", "korenskem", " ", 
     RowBox[{"(", "Cauchyjevem", ")"}], " ", "kriteriju", " ", "konvergira"}],
     ",", " ", 
    RowBox[{
     RowBox[{"\[CHacek]e", " ", "je", " ", "ta", " ", "limita"}], " ", "<", 
     " ", "1"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.9200034178586817`*^9, 3.920003430301897*^9}, {
  3.920003467828794*^9, 
  3.920003515795437*^9}},ExpressionUUID->"33c68b12-bb00-469f-a761-\
4535f5b11beb"],

Cell[BoxData["0.6065306597126334`"], "Output",
 CellChangeTimes->{3.920003460850109*^9},
 CellLabel->
  "Out[375]=",ExpressionUUID->"d001bb60-59ae-4490-8389-1329cc8647e4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "[", "n_", "]"}], " ", ":=", " ", 
  RowBox[{"NSum", "[", 
   RowBox[{
    RowBox[{"a", "[", "m", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"m", ",", " ", "n"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.919347618486032*^9, 3.919347639862368*^9}, 
   3.919347679732863*^9, {3.919347813850646*^9, 3.919347840796671*^9}, {
   3.919347979655208*^9, 3.919347986907691*^9}, {3.919348082769684*^9, 
   3.919348085984256*^9}, {3.919999419441107*^9, 3.919999433279739*^9}, {
   3.920003544130597*^9, 3.9200035533685923`*^9}},
 CellLabel->
  "In[376]:=",ExpressionUUID->"e75cf3e6-e1ac-4469-954e-166432c9f70c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "[", "Infinity", "]"}]], "Input",
 CellChangeTimes->{{3.919347645057005*^9, 3.9193476604943666`*^9}, {
  3.919348097563554*^9, 3.919348106769823*^9}, {3.919348143136969*^9, 
  3.91934815169177*^9}},
 CellLabel->
  "In[377]:=",ExpressionUUID->"58f6ff54-74f9-49da-b58e-823b6f839ad2"],

Cell[BoxData["0.6608494774297689`"], "Output",
 CellChangeTimes->{{3.919347662042652*^9, 3.919347683442231*^9}, 
   3.919348010161669*^9, {3.9193480894597673`*^9, 3.919348107525117*^9}, 
   3.919348152371026*^9, 3.919996860515596*^9, {3.919999415439145*^9, 
   3.919999435791369*^9}, 3.920003559598269*^9},
 CellLabel->
  "Out[377]=",ExpressionUUID->"a72051b0-ecac-47ba-8a02-15521e57276b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  7", "Section",
 CellChangeTimes->{{3.919996397481461*^9, 3.919996402044342*^9}, {
  3.919999362715146*^9, 
  3.9199993628093567`*^9}},ExpressionUUID->"001fb09d-ccbc-4661-a3ca-\
e9d44d7bf591"],

Cell[TextData[{
 "Dano  je  rekurzivno  zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], 
          RowBox[{
            StyleBox["n", "TI"], "+", "1"}]], "\[LongEqual]", 
         FractionBox["1", "6"], 
         RowBox[{"(", 
           RowBox[{
             SubsuperscriptBox[
              StyleBox["a", "TI"], 
              StyleBox["n", "TI"], "2"], "+", 
             SubscriptBox[
              StyleBox["a", "TI"], 
              StyleBox["n", "TI"]], "+", "6"}], ")"}]}], TraditionalForm], 
     "errors" -> {}, "input" -> "a_{n+1} = \\frac{1}{6}(a_n^2 + a_n + 6)", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "753c8fc0-30c1-46d1-8898-0eeaa372f09f"],
 ". "
}], "Text",
 CellChangeTimes->{{3.919998087748533*^9, 3.9199980976564407`*^9}, {
  3.9199981434652343`*^9, 
  3.919998148414006*^9}},ExpressionUUID->"8d203725-5855-4045-932d-\
9d90bc4d9147"],

Cell[TextData[{
 "a) V Mathematici definiraj zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SubscriptBox[
        StyleBox["a", "TI"], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "c0fe55cd-ff79-44e8-8f1b-1554d8008ce1"],
 " z za\[CHacek]etnim \[CHacek]lenom ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       StyleBox["b", "TI"], TraditionalForm], "errors" -> {}, "input" -> "b", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "f71c1f56-9654-4ed2-9996-13787faf0d9d"],
 ".\nb) Izra\[CHacek]unaj prvih 5 \[CHacek]lenova zaporedja ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SubscriptBox[
        StyleBox["a", "TI"], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "429c63cf-636a-42dd-bc1d-879324eed923"],
 ". Nato vse vse izraze raz\[SHacek]iri in zdru\[ZHacek]i na skupni ulomek."
}], "Text",
 CellChangeTimes->{{3.919998153780141*^9, 3.919998264676924*^9}, {
  3.920003805806257*^9, 3.9200038275685883`*^9}, {3.920004196078734*^9, 
  3.920004258869033*^9}, {3.920004919452681*^9, 
  3.920004926249573*^9}},ExpressionUUID->"ff60a0a7-11ee-48d6-b489-\
4c82183e7e1f"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "b", "]"}]], "Input",
 CellChangeTimes->{{3.9200038349846373`*^9, 3.92000383763798*^9}, {
  3.9200039301942663`*^9, 3.920003930613604*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"b7c6acc0-b2fc-4a73-8169-66c730772605"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "[", "1", "]"}], " ", ":=", " ", 
  "b"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"a", "[", "n_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"1", "/", "6"}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"a", "[", 
        RowBox[{"n", " ", "-", " ", "1"}], "]"}], "^", "2"}], " ", "+", " ", 
      RowBox[{"a", "[", 
       RowBox[{"n", " ", "-", " ", "1"}], "]"}], " ", "+", " ", "6"}], 
     ")"}]}]}], " ", ";"}]}], "Input",
 CellChangeTimes->{{3.9200037388182487`*^9, 3.920003795205*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"167deaf7-7b17-41a6-814e-f2b05c31f9a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"prvihPet", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"a", "[", "i", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "1", ",", " ", "5"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.920003843405024*^9, 3.92000385655194*^9}, {
  3.920003926108993*^9, 3.92000392621777*^9}, {3.920003957567943*^9, 
  3.92000397273694*^9}, {3.920004038300352*^9, 3.920004038521759*^9}, {
  3.920004269448902*^9, 3.9200042723594503`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"d8b81339-e667-4137-a71f-676314e304a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", ",", 
   RowBox[{
    FractionBox["1", "6"], " ", 
    RowBox[{"(", 
     RowBox[{"6", "+", "b", "+", 
      SuperscriptBox["b", "2"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "6"], " ", 
    RowBox[{"(", 
     RowBox[{"6", "+", 
      RowBox[{
       FractionBox["1", "6"], " ", 
       RowBox[{"(", 
        RowBox[{"6", "+", "b", "+", 
         SuperscriptBox["b", "2"]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "36"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"6", "+", "b", "+", 
          SuperscriptBox["b", "2"]}], ")"}], "2"]}]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "6"], " ", 
    RowBox[{"(", 
     RowBox[{"6", "+", 
      RowBox[{
       FractionBox["1", "6"], " ", 
       RowBox[{"(", 
        RowBox[{"6", "+", 
         RowBox[{
          FractionBox["1", "6"], " ", 
          RowBox[{"(", 
           RowBox[{"6", "+", "b", "+", 
            SuperscriptBox["b", "2"]}], ")"}]}], "+", 
         RowBox[{
          FractionBox["1", "36"], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"6", "+", "b", "+", 
             SuperscriptBox["b", "2"]}], ")"}], "2"]}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "36"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"6", "+", 
          RowBox[{
           FractionBox["1", "6"], " ", 
           RowBox[{"(", 
            RowBox[{"6", "+", "b", "+", 
             SuperscriptBox["b", "2"]}], ")"}]}], "+", 
          RowBox[{
           FractionBox["1", "36"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"6", "+", "b", "+", 
              SuperscriptBox["b", "2"]}], ")"}], "2"]}]}], ")"}], "2"]}]}], 
     ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "6"], " ", 
    RowBox[{"(", 
     RowBox[{"6", "+", 
      RowBox[{
       FractionBox["1", "6"], " ", 
       RowBox[{"(", 
        RowBox[{"6", "+", 
         RowBox[{
          FractionBox["1", "6"], " ", 
          RowBox[{"(", 
           RowBox[{"6", "+", 
            RowBox[{
             FractionBox["1", "6"], " ", 
             RowBox[{"(", 
              RowBox[{"6", "+", "b", "+", 
               SuperscriptBox["b", "2"]}], ")"}]}], "+", 
            RowBox[{
             FractionBox["1", "36"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"6", "+", "b", "+", 
                SuperscriptBox["b", "2"]}], ")"}], "2"]}]}], ")"}]}], "+", 
         RowBox[{
          FractionBox["1", "36"], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"6", "+", 
             RowBox[{
              FractionBox["1", "6"], " ", 
              RowBox[{"(", 
               RowBox[{"6", "+", "b", "+", 
                SuperscriptBox["b", "2"]}], ")"}]}], "+", 
             RowBox[{
              FractionBox["1", "36"], " ", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"6", "+", "b", "+", 
                 SuperscriptBox["b", "2"]}], ")"}], "2"]}]}], ")"}], "2"]}]}],
         ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "36"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"6", "+", 
          RowBox[{
           FractionBox["1", "6"], " ", 
           RowBox[{"(", 
            RowBox[{"6", "+", 
             RowBox[{
              FractionBox["1", "6"], " ", 
              RowBox[{"(", 
               RowBox[{"6", "+", "b", "+", 
                SuperscriptBox["b", "2"]}], ")"}]}], "+", 
             RowBox[{
              FractionBox["1", "36"], " ", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"6", "+", "b", "+", 
                 SuperscriptBox["b", "2"]}], ")"}], "2"]}]}], ")"}]}], "+", 
          RowBox[{
           FractionBox["1", "36"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"6", "+", 
              RowBox[{
               FractionBox["1", "6"], " ", 
               RowBox[{"(", 
                RowBox[{"6", "+", "b", "+", 
                 SuperscriptBox["b", "2"]}], ")"}]}], "+", 
              RowBox[{
               FractionBox["1", "36"], " ", 
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"6", "+", "b", "+", 
                  SuperscriptBox["b", "2"]}], ")"}], "2"]}]}], ")"}], 
            "2"]}]}], ")"}], "2"]}]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.92000397936279*^9, {3.9200040393755827`*^9, 3.920004060751863*^9}, 
   3.920004176845346*^9, 3.920004274155995*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"bd5858cf-854a-42f0-a618-b3f7557e906a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Together", " ", "/@", " ", 
  RowBox[{"(", 
   RowBox[{"Expand", " ", "/@", " ", "prvihPet"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.920003992590878*^9, 3.9200040040165052`*^9}, {
  3.920004050354581*^9, 3.92000405616224*^9}, {3.920004179558448*^9, 
  3.920004180790501*^9}, {3.920004264661096*^9, 3.920004293915371*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"820bc61e-ac48-4a03-9df5-4bd05bc89882"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", ",", 
   RowBox[{
    FractionBox["1", "6"], " ", 
    RowBox[{"(", 
     RowBox[{"6", "+", "b", "+", 
      SuperscriptBox["b", "2"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "216"], " ", 
    RowBox[{"(", 
     RowBox[{"288", "+", 
      RowBox[{"18", " ", "b"}], "+", 
      RowBox[{"19", " ", 
       SuperscriptBox["b", "2"]}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["b", "3"]}], "+", 
      SuperscriptBox["b", "4"]}], ")"}]}], ",", 
   FractionBox[
    RowBox[{"425088", "+", 
     RowBox[{"14256", " ", "b"}], "+", 
     RowBox[{"15372", " ", 
      SuperscriptBox["b", "2"]}], "+", 
     RowBox[{"2268", " ", 
      SuperscriptBox["b", "3"]}], "+", 
     RowBox[{"1225", " ", 
      SuperscriptBox["b", "4"]}], "+", 
     RowBox[{"112", " ", 
      SuperscriptBox["b", "5"]}], "+", 
     RowBox[{"42", " ", 
      SuperscriptBox["b", "6"]}], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["b", "7"]}], "+", 
     SuperscriptBox["b", "8"]}], "279936"], ",", 
   RowBox[{
    FractionBox["1", "470184984576"], 
    RowBox[{"(", 
     RowBox[{"769882226688", "+", 
      RowBox[{"16110876672", " ", "b"}], "+", 
      RowBox[{"17575315200", " ", 
       SuperscriptBox["b", "2"]}], "+", 
      RowBox[{"3001380480", " ", 
       SuperscriptBox["b", "3"]}], "+", 
      RowBox[{"1685350800", " ", 
       SuperscriptBox["b", "4"]}], "+", 
      RowBox[{"231227136", " ", 
       SuperscriptBox["b", "5"]}], "+", 
      RowBox[{"93463272", " ", 
       SuperscriptBox["b", "6"]}], "+", 
      RowBox[{"14717880", " ", 
       SuperscriptBox["b", "7"]}], "+", 
      RowBox[{"4544065", " ", 
       SuperscriptBox["b", "8"]}], "+", 
      RowBox[{"616400", " ", 
       SuperscriptBox["b", "9"]}], "+", 
      RowBox[{"164332", " ", 
       SuperscriptBox["b", "10"]}], "+", 
      RowBox[{"23744", " ", 
       SuperscriptBox["b", "11"]}], "+", 
      RowBox[{"5110", " ", 
       SuperscriptBox["b", "12"]}], "+", 
      RowBox[{"560", " ", 
       SuperscriptBox["b", "13"]}], "+", 
      RowBox[{"100", " ", 
       SuperscriptBox["b", "14"]}], "+", 
      RowBox[{"8", " ", 
       SuperscriptBox["b", "15"]}], "+", 
      SuperscriptBox["b", "16"]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.920004295534547*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"e76ce9f5-d641-4470-ab6c-45ac5c3d5413"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  8", "Section",
 CellChangeTimes->{{3.920004938344748*^9, 
  3.920004941839056*^9}},ExpressionUUID->"9f2bc02c-e835-4418-8d6f-\
c5e777a34102"],

Cell[TextData[{
 "Za zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], 
          StyleBox["n", "TI"]], "\[LongEqual]", 
         SubscriptBox[
          StyleBox["a", "TI"], 
          RowBox[{
            StyleBox["n", "TI"], "-", "1"}]], "+", 
         FractionBox[
          RowBox[{
            StyleBox["n", "TI"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["a", "TI"], 
             RowBox[{
               StyleBox["n", "TI"], "-", "2"}]]}], 
          RowBox[{
            StyleBox["n", "TI"], "+", "1"}]]}], TraditionalForm], 
     "errors" -> {}, "input" -> 
     "a_n = a_{n-1} + \\frac{n\\cdot a_{n-2}}{n+1}", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "20cf92ac-7152-4b29-b92e-28e8f3e93f01"],
 " z za\[CHacek]etnima \[CHacek]lenoma ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], "1"], "\[LongEqual]", "0"}], TraditionalForm], 
     "errors" -> {}, "input" -> "a_1 = 0", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "45306aaa-d49e-4896-bec7-aedb5f83d13d"],
 " in ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], "2"], "\[LongEqual]", "1"}], TraditionalForm], 
     "errors" -> {}, "input" -> "a_2 = 1", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "09e96762-5547-4821-a1f8-ab5e8039abd2"],
 " izra\[CHacek]unajte njegovo limito. Uporabite RSolveValue."
}], "Text",
 CellChangeTimes->{{3.920004943846568*^9, 3.920004957246263*^9}, {
  3.920005040870591*^9, 
  3.920005088511555*^9}},ExpressionUUID->"63352993-628e-4bab-8dd3-\
c3f0ebc13166"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RSolveValue", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "[", 
       RowBox[{"n", "+", "1"}], "]"}], "==", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"x", "[", "n", "]"}], "+", 
         RowBox[{"n", " ", 
          RowBox[{"x", "[", 
           RowBox[{"n", "-", "1"}], "]"}]}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"n", "+", "1"}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"x", "[", "1", "]"}], "==", "0"}], ",", 
     RowBox[{
      RowBox[{"x", "[", "2", "]"}], "==", "1"}]}], "}"}], ",", 
   RowBox[{"x", "[", "\[Infinity]", "]"}], ",", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.9200051185412807`*^9, 3.9200051820794153`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"f3c199db-3b5a-4841-8850-a0a15e787615"],

Cell[BoxData[
 RowBox[{"2", "-", 
  RowBox[{"2", " ", 
   RowBox[{"Log", "[", "2", "]"}]}]}]], "Output",
 CellChangeTimes->{3.920005138024827*^9, 3.920005197152637*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"7acd2317-5336-4ebf-b8f2-30af04d841bd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga 9", "Section",
 CellChangeTimes->{{3.8231618891351395`*^9, 3.82316190190687*^9}, {
  3.9502519693706083`*^9, 
  3.95025196956229*^9}},ExpressionUUID->"f3fb7d76-9945-4ec4-9a16-\
f63bf2204a94"],

Cell["\<\
Naslednje naloge re\[SHacek]i s pomo\[CHacek]jo vnosa z naravnim jezikom \
(brez znanja sintakse Mathematice in brez pomo\[ZHacek]nih ra\[CHacek]unov). \
V vseh primerih se prepri\[CHacek]aj, da je Mathematica razumela tvoj ukaz. \
Glej spodnji primer.\
\>", "Text",
 CellChangeTimes->{{3.824278606060779*^9, 3.824278689591808*^9}, {
  3.824278888560747*^9, 3.8242788915809774`*^9}, {3.824278997512186*^9, 
  3.82427901034433*^9}},ExpressionUUID->"b901e2ae-d41c-4421-98bd-\
a2daaa0d1276"],

Cell[CellGroupData[{

Cell["Primer", "Subsection",
 CellChangeTimes->{{3.824278693799258*^9, 3.8242787132071357`*^9}, {
  3.824278902865645*^9, 
  3.82427890305021*^9}},ExpressionUUID->"3f0d8c0c-05d0-479b-9dd5-\
548edc607c38"],

Cell["\<\
Izra\[CHacek]unaj 20. \[SHacek]tevko v decimalnem zapisu \[SHacek]tevila \
1+1/2+1/3+...+1/100.\
\>", "Text",
 CellChangeTimes->{{3.824278790003468*^9, 
  3.8242788561122627`*^9}},ExpressionUUID->"ddf27002-cc35-4f77-b38e-\
61e93fec7506"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "please compute the 20th digit of 1+1/2+1/3+...+1/100", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Output", "8"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> True}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["20", "\"th\""], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"20", "\"th\""}]]], 
                    "\" digit\""}, "RowDefault"], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    TagBox[
                    RowBox[{"1", "+", 
                    FractionBox["1", "2"], "+", 
                    FractionBox["1", "3"], "+", "\"\[CenterEllipsis]\"", "+", 
                    
                    FractionBox["1", "100"]}], HoldForm], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Sum", "title" -> 
     "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"8"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["8", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show details", "input" -> "Result__Show details"}, {}]}]}],
    Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NearByDigits", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "NthDigit", "title" -> 
     "Nearby digits"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["\".\"", 
               GrayLevel[0.5], StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], "8", 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["4", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["\"\[Ellipsis]\"", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "NthDigit", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.42", 
    "parsetiming" -> "0.935", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP26391cdgi3i9iic87i2e00002e3ge1165592fe15", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "5", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa26401cdgi3i9iic87i2e0000491c41b5f5259b6c6728076557243023091", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2021, 3, 9, 12, 39, 35.0636592`9.297432130252918}, "Line" -> 1,
     "SessionID" -> 29838564271048567026}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Output", "8"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "please compute the 20th digit of 1+1/2+1/3+...+1/100"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {362., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[1]:=",ExpressionUUID->"e278e9a2-d22a-44e1-8ce0-5629702f6379"],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{3.8242787753956847`*^9, 3.9212122232970133`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"70d57097-c4bd-41b4-b030-c07bb05d8812"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloge", "Subsection",
 CellChangeTimes->{{3.8242788626612997`*^9, 
  3.8242788980299807`*^9}},ExpressionUUID->"d521e3cc-4c08-41e6-b8fa-\
ee5a2286b93c"],

Cell["Dolo\[CHacek]i 443. \[SHacek]tevko v decimalnem zapisu \[SHacek]tevila \
pi.", "Text",
 CellChangeTimes->{{3.82367445232017*^9, 3.823674533161069*^9}, {
  3.8242789123164234`*^9, 
  3.824278926666879*^9}},ExpressionUUID->"dac08833-3c6c-448d-8634-\
4d98fefe68b7"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "443th digit of pi", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "ResourceFunction[\"NthDigit\"][Pi, 443]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ResourceFunction[\"NthDigit\"][Pi, 443]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["443", "\"rd\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"443", "\[InvisibleSpace]", "\"rd\""}]]], 
                    "\" digit\""}, "RowDefault"], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox["\[Pi]", HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "NthDigit", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(First[Flatten[RealDigits[#1, 10, 1, If[#1 < 1, 1 - #1, \
Ceiling[Log[10, #1]] - #2]]]] & )[Pi, 443]"}], 
       XMLElement["moutput", {}, {"1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["1", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Nearby digits", "scanner" -> "NthDigit", "id" -> 
     "NearByDigits", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\"\[Ellipsis]\"", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], "1", 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["4", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["4", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["4", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["4", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["\"\[Ellipsis]\"", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "NthDigit", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "0.484", "parsetiming" -> "0.274", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP1210513chf6iagc25fb9h00003c54i975448f4bf4", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "8", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa1210613chf6iagc25fb9h0000298f2cfhegf10h903172133347439184749", "version" -> 
    "2.6", "inputstring" -> "443th digit of pi"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2024, 4, 3, 21, 43, 23.674286`8.126851872739937}, "Line" -> 5, 
    "SessionID" -> 28693052527504923396}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "ResourceFunction[\"NthDigit\"][Pi, 443]"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "443th digit of pi"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {380., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[2]:=",ExpressionUUID->"48998f59-abca-4a71-bda1-64e8ea2923bb"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.9211621648012743`*^9, 3.921162200364189*^9, 
  3.921212225355673*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"fa559b15-69de-45a2-bd81-0ee17227febf"]
}, Open  ]],

Cell["\<\
Izra\[CHacek]unaj plo\[SHacek]\[CHacek]ino obmo\[CHacek]ja med krivuljama \
f(x)=3x^2+2x+1 in g(x)=4-4x^4.\
\>", "Text",
 CellChangeTimes->{{3.824278934923018*^9, 3.8242789483250437`*^9}, {
  3.8242790294320073`*^9, 3.824279067181547*^9}, {3.824279128999233*^9, 
  3.824279136992445*^9}},ExpressionUUID->"3392e64e-fca8-44d4-aa16-\
be74f992aea2"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "area between curves f(x)=3x^2+2x+1 and g(x)=4-4x^4", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "ResourceFunction[\"AreaBetweenCurves\"][{f[x] == 3*x^2 + 2*x + 1, \
g[x] == 4 - 4*x^4}, x]"}, "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ResourceFunction[\"AreaBetweenCurves\"][{1 - 2 x + x^2, 6 x - x^2}, \
x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"area between\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center], 
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"2", " ", "x"}], "+", 
                    SuperscriptBox["x", "2"]}], HoldForm]}, {
                    TagBox[
                    RowBox[{
                    RowBox[{"6", " ", "x"}], "-", 
                    SuperscriptBox["x", "2"]}], HoldForm]}}, 
                    GridBoxBackground -> {
                    "Columns" -> {None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 
                    Automatic], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "ApplicationsOfIntegration", 
     "id" -> "Result", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[-1 + 8 x - 2 x^2, {x, (4 - Sqrt[14])/2, (4 + \
Sqrt[14])/2}]"}], 
       XMLElement["moutput", {}, {"(14 Sqrt[14])/3"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"4", "-", 
                    SqrtBox["14"]}], ")"}]}], 
                  RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"4", "+", 
                    SqrtBox["14"]}], ")"}]}]], 
                 RowBox[{
                   RowBox[{"(", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"8", " ", "x"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "2"]}]}], Identity], 
                    PrecedenceForm[#, 310.]& ], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{"14", " ", 
                  SqrtBox["14"]}], "3"], Identity], "\[TildeTilde]", 
              TagBox["17.46106780494506`", Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Result__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "ApplicationsOfIntegration", "id" -> 
     "Plot", "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                GraphicsComplexBox[CompressedData["
1:eJztenk01V3bv4RzDB1DlLnzFTKUKKmIfRERhSRzSYhMlSi3TJmSQmXMnClT
RSlDg1MkpUxlqCRzisyZ7uK3W0/HH8+71u9e93qftZ617vX6x7rW3ufa197X
9bn2/n7Whzhy3MiekYGBYetyBoZf/2VGjh88VT9QaSsbbeR3hgR7H+hWUo72
VhqtmViTnckER0KZN11x/FQ5c/HeDtvny6Dhq63TocD2yq1XZPf2XltALbem
vjc+bqo84edzWl9wHlU0+vcwNFVXljjwfY1J/44MS+ou6vkUVtqL73BxfzuO
lOVipoK7b6GPnzlPJKsPo0XN9vvhujWouifMacObfnTVyTSaYbwJxWROm764
2oXWqoZ98DN4h+RsksQCbNtQ2EH7hn38Xag19GIRY1oDKnZxPX/lTC8yKSwS
OpJRhQTUE55von5Gg8ubCkWL7qKNQ3pa68K/Ili+QaS0MQUFW4jp+aqOIIYD
DxT9ahwRy+vb+2mjY4jB50c8H7cLut52Nd35+gSiVVPUOm4moQ+a54ufn5lC
YMfeoDN9Fw0Lg81ruWkUlm11brVIFUoxZWsJYptF6QF6szIyjchhnjR1+eMc
qlVc2PjTuB2RyS+Lta/8iYanLNzflHeh3V4pm28f+4lm055HfPMZQIf3bzGm
iS0iu4uZ8oMZw2i3HgNXzDEGGO4onthUPI42pY6YUo2XwR4P8Q/eT76jUEl0
fNlGRrC6PBGx8dsckjmcMKgsvBxgykaFvWMBfdh7sXQNMxMkr3rmdoSTEWZO
dB0w72SCx3zZvRvvMoGtlprJ0Atm4GBdriVRTQJlgwWJ5mwWGE6Ujn/VxAai
K8z07HxJIMWZ49v/cwUY+VQ06zuQYZVz881tTVwwTvWXjlRnhc/H5Yosknmg
6/SeHgk5Ntg1bWFqkcsLyow+Tjzs7CAlpn90f/4quK6upZPfyw7sTmd7LMv5
wWzT6rDEeg448UZNYoQiBN5mevGf8lZAu9t9n2ljERjeGEb2jadATqbO2k0D
a8D5waGGZwGcUP3FPEJsJwEyj+vuKGzggtMudx1jwsRA+8zwrfWZXDAkHK8b
Or0WBPUe8xhxc8MOESbVE2YSMDlrRez15Yad9rnb+x9Lgsfi4mGPCW4o8n+h
cctQCgqoxuQaax4osLp6+/YbaXj286Zz/TsesK1hcPG5IgsPjQ9S1AX7K2/J
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
Cv8Psb06AA==
                 "], {{{}, {}, {}, {}, {}, {}, {}, {}, {
                    EdgeForm[], 
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    Opacity[0.15]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl1HV0FVQcwPHHQBpGd40G6xzZBkh5pFsagxoltSGIglLSEgKHRqUUlFIU
SWmkBVSUDkFAQhppwc89/PHZ994X29n93fdiEpIaJ0ZFIpFk/O1HmeSRSBrr
tBxkPv15k6rEko5DLGAAb1GNONJzmK8YSCuqE89ZljOaLjQiA0f4mkG0pgZl
OccPjKErjcnIURYymDbU5ArrmEQvynGeFYylG02I5hiL+Ii21OIq65lMb8qH
82Al4+jOPXYwi6bcZDPTeZ+H7GYumTjOYobwmL204w7b+IwoZ/6r1uYaG0jl
sSmRp0PZH85b39UH7CKN/RxNoQfCmevLeoFVpLT/RJ+wL8zSvofeZyep7Wdr
cv1Nm3GLLcwIf9bjv2hfHrGHeWTmBEsYSgJ32c7n1OE6G5lKHypwkdWMJ5Hm
3GYrM+lHFk6ylGG0py432MQ03qMil1jDBJJoQVZO8Q3D6UA9KnGZtUykJy3J
xp98ywg6Up/KZOc0yxhJJxpQhRyc4TtG0ZmGvEJOcpGbPOQlH/kpQEEKEUNh
ilCUYhSnBCUpRWnifRbjOG4e0T6kA/Qvslt/EWbHM9av6WIOk86+m05kK3d4
kTfow6f8zBOq0JCuTGAL//IClWlAF8azmds8TyXq83a4Z2ziFs9RkXp0Zhwb
ucmzvB7uMTPZw2MqUJdOjGUDNyhNS3ozg938F+45/ZkXPjek8P/W0Y6MYT3X
KcVgFvAHqb2uhfZiOrt4RHk+ZG648yT3utq6iEOkte+go1nHNUqynJNk9vwg
PUsO6/maT3/XVNpcC+t5zaVLNb8e1Qz6jsboac2q0zSP7tSHlKNI1NPv5ty6
TAvoMc2oH+gZslnP0by6X6O0lp4jp/VCPUga6/Z6iizWH+uPXKUE33OCTJ4b
qF9ygJT2zXQJR0hv31OnsoMHlKUfs9lHMq+pqQmMYi1XKE5TkpjCdu4TT19m
sZeI99fQdoxkDf9QjCYkMplt3COO6rRlBKu5TFEa04NJ/MRdYqlGG4azikvh
vClDVVozjJVcDLPkJV6lFUNZwYUwRwpRMMwozDnchTCTMNMwv3AHwjzCXSF7
mFuYe5hFuEvh3IkOs6UR3cPvdA6xvgf+B9Mv6yk=
                    "]]}]}, {
                    EdgeForm[], 
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    Opacity[0.15]], 
                    GraphicsGroupBox[{
                    
                    PolygonBox[{{480, 820, 819, 818}, {821, 543, 823, 
                    822}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]], 
                    LineBox[CompressedData["
1:eJwV02WYFWUAhuElFli6UbpDUGDp7pJeRBBUYFHpBenu7pTulg4Jiy6RDmkU
le5uuOfHfZ755vyY65r3nEyR7SOiooWEhCTxEfQUi+hFI8pTgOjEICahxCI2
cQj3RQHCXMflNIvpTWMqUJB4/MUS+vAlFSlEfM6wlL58RSUK8x8bGEkr6pKA
syyjH19TmSL8z0ZG0ZoIEnKO5fSnCVW4w69MoiNFucpPjKYN9UjEeX5kAE2p
yl1+YzKdKMY1NjGGtjxnH3P4jIfsYBrdeMUfzCcxF1jBQN5yiGY8ZQ+zgj2M
dUyrcY/fgz3cm6LBkEeC962d9SUHCHOeF2yoJ4J3rsX1OpuDTZ3H6jsOB1s6
t9MX7A+2dp4b/A70uNbnETuZHjzW/aPandccZAFJuMhKBhHJM/Yym0+5zzZ+
oAsluMEWxhHF5zxmFzPoQVIusYrBNKc6D9jOVLpSkptsZTztaUAyLrOaIXxD
DUpxi5+ZQAcakpy/WcNQvqUmpUnBP6xlGN9RizKk5ArrGE4LalOWVHzAh6Qm
DWlJR3oykJFMZCYLWclGdnKQk1x8RGH/xSLkdp2Hj/mEvOQjP/+ynhG0pA7l
uM0vTOR7vuAJu5lJT97wJwsJtflJTaDh+h6LOIKN
                    "]]}, Annotation[#, "Charting`Private`Tag$3828404#1"]& ], 
                   
                   TagBox[{
                    Directive[
                    Opacity[0]], 
                    LineBox[CompressedData["
1:eJwV1HesjXcYwPHjXhe1rtFrc6+9SewtQVF7r4Tae4/EJrFnCdoisUmsRIjV
okWNovbee++9+fz++Jzv88t5T3LO+7w5OTv2a9I3USQSifFynVLRkUhCVCTS
29yY1MSShrSkIz0/EkcGMpKJzGQhK9nITg7iSSAn99nMONpSjRLk4gFbGE87
qlOS3DxkKxP4hRrhu/KOf5lDH5qQh0dsYyLt+YnSvGcfcwk/vCl5ecx2JtGB
muGmuA//6yKGUoYP7Gce/WhGPp7wJ5PpSC0S+fxRXcwwyvKRA/xGf1K65oKu
ozlJnE/pCkaH++58RTeSn6f8xZSwC+9d0078YD6rq8M+zHe0NlHmY2EnuiTs
TW/q8LBb86WwI90Q9qf3wv3WcvqJg2Gnzr+HveuNsEcdoKn0Ytizrg/PgN4N
u9QWmlRPh2dBV4ZnRW/rmPAsma/qJgrwjB1MpTPJvX9O1/Az0c7HdSkjKM9n
/uMPBtKSZK47o6sYS0Ges5NpdKEOiV13Qpcxkgp84RDzGUQrCvGCXUynK3Wp
yFcOs4DBtKYwL/mbGXSjHpUowiv+YSbdqU9livKa3fxKDxpQhWK8YQ+z6ElD
qvKNIyxkCG0ozlv2MptepPB7z+taGhHjfFKXE2e+paOINV/W0v4H4s3fAWi7
e4Y=
                    "]]}, Annotation[#, "Charting`Private`Tag$3828404#2"]& ], 
                   
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.5]], 
                    LineBox[CompressedData["
1:eJwV0lWgVUUYgNHDpetKSYN0KXFBujulQZG+IKh0dwpIdyPdLSWdSquASBh0
Kt0daz+s8838e87TTPrIDrXbRwmFQuF+MoWFQs85yBz68RX1yUwWspKN7OTg
Yz4hJ7nITR4iyEs+PiU/BShIIQpThKIUozglKMkLDjGX/rTic0rxksPMYwCt
+YLSvOII8xnI1zQgZtRQ6LSuZjRdKcNrjrKAQXzDl8Ry/oyuYQzdKMsbfmUh
g/mWBM5e0J+YQkNim53VtYylO+V4y28s4jvakNDZi7qZqTQijtlf+iPjSGX/
v+6lBx/aX9XtzCSt/R39hfK843cWk963+zqEFNY3dXdwn9aPtS2JrC8F96lb
NKM+1Gmksb4d3K/+HNy/Pg3uWBtrXP07eA+6TjPog+At6HhNrbeCN6L7gjek
T4J3oj01qV4L3pHu0Ez6SGfxkfVd3U8FQvbHdAlDSWn/n+6hHYntL+tWptOE
eGb/6Hom0ItkZtd1Jz9QkShmx3Upw2hPErMruo0ZNCW+2b+6gYn0phJh5id0
Gd/TgWaEm5/TjUyiD5WJav6HLmc4HWlOFaL5dlJXMIJORFKV6L79qSsZSWda
UI3PqE4NalKL2tShLjH895SuYhRdaMkH5ud1E5PpS3KzG7qL2aSzv6cHyGb9
TCO0nr4HbOaF5A==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$3828404#3"]& ]}}], {}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
                AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, {{-5., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {10., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {15., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-10., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-9., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-8., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-7., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-6., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-4., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {6., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {7., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {8., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {9., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {11., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {12., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {13., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {14., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {16., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {17., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {18., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {19., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {20., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{0., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-0.8, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-0.6, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-0.4, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-0.2, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.2, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.4, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.6, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.8, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.2, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.4, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.6, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.8, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2.2, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2.4, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2.6, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2.8, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.2, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.4, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.6, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.8, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4.2, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4.4, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4.6, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4.8, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {None, None}, 
                DisplayFunction -> Identity, 
                PlotRangePadding -> {{0, 0}, {0, 0}}, PlotRangeClipping -> 
                True, ImagePadding -> All, DisplayFunction -> Identity, 
                AspectRatio -> 1, Axes -> {True, True}, AxesLabel -> {
                  FormBox[
                   StyleBox[
                    TagBox["x", HoldForm], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                  FormBox[
                   StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm]}, 
                AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                  GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                  FontOpacity -> 1], BaseStyle -> Automatic, DisplayFunction :> 
                Identity, Frame -> {{False, False}, {False, False}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                  FontOpacity -> 1], 
                FrameTicks -> {{Automatic, Automatic}, {
                  Automatic, Automatic}}, GridLines -> {None, None}, 
                GridLinesStyle -> {
                  GrayLevel[0.85], 
                  GrayLevel[0.85]}, ImageSize -> 330., 
                Method -> {
                 "DefaultBoundaryStyle" -> Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultMeshStyle" -> PointSize[Medium], 
                  "PointSizeFunction" -> "SmallPointSize", "ScalingFunctions" -> 
                  None, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}, "AxesInFront" -> True}, 
                PlotRange -> {{-0.712701605411107, 
                 4.712701605411107}, {-6.6409838346661285`, 
                 15.64098385132115}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{Automatic, Automatic}, {
                  Automatic, Automatic}}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                Ticks -> {Automatic, Automatic}, TicksStyle -> 
                Directive[FontFamily -> "Times", FontSize -> 10]}, TicksStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1]], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, ImageSize -> 
                    NCache[
                    Rational[143, 10], 14.3], 
                    BaselinePosition -> (Center -> Center)}, TicksStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]], 
                  StyleBox[
                   TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"2", " ", "x"}], "+", 
                    SuperscriptBox["x", "2"]}], HoldForm], {
                   FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.5]], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, ImageSize -> 
                    NCache[
                    Rational[143, 10], 14.3], 
                    BaselinePosition -> (Center -> Center)}, TicksStyle -> 
                   Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]], 
                  StyleBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"6", " ", "x"}], "-", 
                    SuperscriptBox["x", "2"]}], HoldForm], {
                   FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox["Labeled", FontFamily -> "Roboto", FontSize -> 13], 
                "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox["Right", FontFamily -> "Roboto", FontSize -> 13]}],
                 "]"}]& )], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "4"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "area between curves", "template" -> 
        "Assuming \"area between curves\" refers to a \
computation${separator}Use as ${desc} instead", "count" -> "2", "pulldown" -> 
        "false", "default" -> 
        "{\"C\", \"area between curves\"} -> {\"Calculator\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Calculator", "desc" -> "a computation", "input" -> 
          "{\"C\", \"area between curves\"} -> {\"Calculator\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "ExamplePage", "desc" -> "a general topic", "input" -> 
          "{\"C\", \"area between curves\"} -> {\"ExamplePage\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "template" -> "curve 1:${field}", "count" -> 
        "1", "pulldown" -> "false", "current" -> "1", "default" -> 
        "{\"F\", \"AreaBetweenCurvesCalculator\", \"f1\"} -> \"1 - 2 x + \
x^2\""}, {
        XMLElement[
        "value", {
         "valid" -> "true", "name" -> "AreaBetweenCurvesCalculator.f1", 
          "desc" -> "1 - 2 x + x^2", "input" -> 
          "{\"F\", \"AreaBetweenCurvesCalculator\", \"f1\"} -> \"1 - 2 x + \
x^2\""}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "template" -> "curve 2:${field}", "count" -> 
        "1", "pulldown" -> "false", "current" -> "1", "default" -> 
        "{\"F\", \"AreaBetweenCurvesCalculator\", \"f2\"} -> \"6 x - x^2\""}, {
        XMLElement[
        "value", {
         "valid" -> "true", "name" -> "AreaBetweenCurvesCalculator.f2", 
          "desc" -> "6 x - x^2", "input" -> 
          "{\"F\", \"AreaBetweenCurvesCalculator\", \"f2\"} -> \"6 x - \
x^2\""}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariableInclude", "template" -> 
        "Also include: ${desc}", "count" -> "1", "pulldown" -> "false", 
        "default" -> 
        "{\"FVarOpt\", \"1\"} -> {{}, {{{\"AreaBetweenCurvesCalculator\", \
\"variable\"}, {\"AreaBetweenCurvesCalculator\", \"rangestart\"}, \
{\"AreaBetweenCurvesCalculator\", \"rangeend\"}}}, {}}"}, {
        XMLElement[
        "value", {
         "name" -> 
          "AreaBetweenCurvesCalculator.variable,AreaBetweenCurvesCalculator.\
rangestart,AreaBetweenCurvesCalculator.rangeend", "desc" -> "end points", 
          "input" -> 
          "{\"FVarOpt\"} -> {{\"AreaBetweenCurvesCalculator\", \"variable\"}, \
{\"AreaBetweenCurvesCalculator\", \"rangestart\"}, \
{\"AreaBetweenCurvesCalculator\", \"rangeend\"}}"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "area between curves", "score" -> "0.38", "level" -> "medium"}, {
       "\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.02", "level" -> "low"}, {"f"}], 
        "\n  "}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[
   True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "AreaBetweenCurves", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "5.514", "parsetiming" -> "0.265", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP148712g07eh89bfbh7eg000053d32b8ea4ee8heg", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "5", "related" -> "", 
    "version" -> "2.6", "inputstring" -> "area between curves"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2024, 4, 3, 21, 46, 27.976831`8.19937350120242}, "Line" -> 9, 
    "SessionID" -> 28693052527504923396}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "ResourceFunction[\"AreaBetweenCurves\"][{f[x] == 3*x^2 + 2*x + 1, g[x] \
== 4 - 4*x^4}, x]"}, Typeset`open$$ = False, Typeset`newq$$ = 
   "area between curves f(x)=3x^2+2x+1 and g(x)=4-4x^4"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{505., {56., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[3]:=",ExpressionUUID->"daf06442-3bfe-4e5d-a660-b193d7ac5b1f"],

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["AreaBetweenCurves", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{11., {1., 10.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{11., {1., 10.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["AreaBetweenCurves", "ResourceFunctionLabel"], 
                    " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"5.3.2\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/abc37cb4-4b69-4bcd-94ba-ec92af70b0da/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "AreaBetweenCurves"},
    TagBoxNote->"FunctionResourceBox"],
   ResourceFunction["AreaBetweenCurves"],
   Selectable->False], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"f", "[", "x", "]"}], "\[Equal]", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "x"}], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["x", "2"]}]}]}], ",", 
     RowBox[{
      RowBox[{"g", "[", "x", "]"}], "\[Equal]", 
      RowBox[{"4", "-", 
       RowBox[{"4", " ", 
        SuperscriptBox["x", "4"]}]}]}]}], "}"}], ",", "x"}], "]"}]], "Output",\

 CellChangeTimes->{3.921162376228553*^9, 3.921212226715234*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"ca22722a-88b5-4bcb-9c49-30517f9765f1"]
}, Open  ]],

Cell["Izra\[CHacek]unaj f(3), kjer je f(x)=1+1/x.", "Text",
 CellChangeTimes->{{3.824279221136812*^9, 3.824279248408711*^9}, {
  3.82427946829105*^9, 3.824279470231556*^9}, {3.824279511797959*^9, 
  3.8242795119608803`*^9}},ExpressionUUID->"5b959454-9038-4558-8d25-\
6ecfabd991b6"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "compute f(3) where f(x) = 1 + 1/x", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "f[x] == 1 + 1/x /. {x -> 3}"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ReplaceAll[f[x] == 1 + 1/x, {x -> 3}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"f", "(", "x", ")"}], "\[LongEqual]", 
                  TagBox[
                   RowBox[{"1", "+", 
                    FractionBox["1", "x"]}], Identity]}], HoldForm], 
               StyleBox["\" where \"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               RowBox[{
                 TagBox["x", HoldForm], "\[LongEqual]", 
                 TagBox["3", HoldForm]}]}, "RowDefault"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "EvaluateAt", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"f[x] == 1 + 1/x /. {x -> 3}"}], 
       XMLElement["moutput", {}, {"f[3] == 4/3"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"f", "(", "3", ")"}], "\[LongEqual]", 
              TagBox[
               FractionBox["4", "3"], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Result__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plot", "id" -> "Plot", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[1 + 1/x, {x, -48.5, 54.5}, Epilog -> Point[{3, 4/3}]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max7044$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min7043$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7043$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7044$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$6893492$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min7043$\
6893497$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7044$6893498$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max7044$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min7043$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$6893492$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7043$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7043$\
6893497$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7044$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7044$\
6893498$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$6893470[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1 + $CellContext`x^(-1), {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7043$$], 
                    (
                    Piecewise[{{
                    3. + 55.05581583395932 Tan[1.5040801783846716` #], # < 
                    0}}, 3. + 
                    55.05581583395932 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7043$$], \
-48.499999999999915`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7043$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7044$$]], \

                    (Piecewise[{{
                    3. + 55.05581583395932 Tan[1.5040801783846716` #], # < 
                    0}}, 3. + 55.05581583395932 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7043$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7044$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7043$$ + 
                    0.10299999999999983`, 
                    CalculateUtilities`GraphicsUtilities`Private`max7044$$]], 
                    54.499999999999915`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    PlotStyle -> {{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]]}, {
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.5]]}, {
                    Directive[
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.5]]}, {
                    Directive[
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.5]]}, {
                    Directive[
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.5]]}}, Epilog -> {
                    AbsolutePointSize[5], 
                    Hue[0], 
                    Point[{3, 
                    Rational[4, 3]}]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7043$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7044$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$6893470]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$6893470[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$6893470[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMgE1ofEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/uTCZcJ4ewnPH6x83Jre+\
eph8FYRsQYUEJvtYXMp4poSHsIdMWat5yIb/74oDx+KjiP4XsBIgF9z3rHilALIwXhmE/\
wrRebqduYmCGCEkXPnSYnz2HbC7RRTGRjmOX4xtlkPWsLTFSmPTd3Sm7WKciHfx0fyNjF5D0uaXd2B\
IaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+bDTIs6dM/\
b90wLRZDuN52zBgdmhrvFp7y/DbbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DSJBuM4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.256", "parsetiming" -> "0.6910000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP92691cee85adbbh01hd50000592be8cc48623dgh", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa92701cee85adbbh01hd500005gb17ehdb3bg003h6249686130609588165", "version" -> 
    "2.6", "inputstring" -> "compute f(3) where f(x) = 1 + 1/x"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2024, 4, 3, 21, 47, 20.705692`8.068664733238263}, "Line" -> 10,
     "SessionID" -> 28693052527504923396}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "f[x] == 1 + 1/x /. {x -> 3}"}, 
   Typeset`open$$ = True, Typeset`newq$$ = 
   "compute f(3) where f(x) = 1 + 1/x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {678., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[4]:=",ExpressionUUID->"eae7e27d-183e-47e5-b1cf-68b82f4c037d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "3", "]"}], "\[Equal]", 
  FractionBox["4", "3"]}]], "Output",
 CellChangeTimes->{3.921162432446143*^9, 3.9212122267403*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"b5007728-5af9-46d6-8724-29970ac26f31"]
}, Open  ]],

Cell["\<\
Izra\[CHacek]unaj obseg elipse s polosema 4 in 3. Ugotovi pribli\[ZHacek]no \
vrednost.\
\>", "Text",
 CellChangeTimes->{{3.824279529171213*^9, 3.824279558645338*^9}, {
  3.824279718775467*^9, 
  3.824279730244441*^9}},ExpressionUUID->"5c629ebf-f2d1-4916-9c42-\
b4af33268a3c"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "circumference of elipse with semi-axes 4 and 3", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "ResourceFunction[\"EllipseProperties\"][Association[\"\
SemiAxisLengths\" -> {4, 3}], {x, y}][\"Circumference\"]"}, "ExtrusionOpen" -> 
      True, "Formats" -> {
       "cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ResourceFunction[\"EllipseProperties\"][Association[\"\
SemiAxisLengths\" -> {4, 3}], {x, y}][\"Circumference\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"ellipse\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`GeometryData, "Ellipse"}]], 
                    Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["\"semi\[Hyphen]axis lengths\"", Identity], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    RowBox[{
                    TagBox["4", HoldForm], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TagBox["3", HoldForm]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0]}, "RowDefault"], 
                    TagBox["\"circumference\"", Identity]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Geometry", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"16 EllipticE[7/16]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"16", " ", 
                TemplateBox[{
                  FractionBox["7", "16"]}, "EllipticE"]}], "\[TildeTilde]", 
              "22.103492160709504`"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> 
         "E(m) is the complete elliptic integral of the second kind with \
parameter m = k^2"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/EllipticE.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/EllipticIntegrals/EllipticE",
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/\
CompleteEllipticIntegraloftheSecondKind.html", "text" -> "Definition", 
           "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Visual representation", "scanner" -> "Geometry", "id" -> 
     "VisualRepresentation", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Circle[{0, 0}, {4, 3}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{
               Directive[
                AbsoluteThickness[1], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                FaceForm[
                 RGBColor[
                  NCache[{1, 
                    Rational[254, 255], 
                    Rational[209, 255]}, {
                   1, 0.996078431372549, 0.8196078431372549}]]]], {
                CircleBox[{0, 0}, {4, 3}]}}, {{}, {}}, {{{
                 GrayLevel[0.6], 
                 LineBox[{{0, 0}, {4, 0}}], 
                 LineBox[{{0, 0}, {0, 3}}]}, 
                InsetBox[
                 FormBox["4", TraditionalForm], {2, 0}, {0., 1.5}], 
                InsetBox[
                 FormBox["3", TraditionalForm], 
                 NCache[{0, 
                   Rational[3, 2]}, {0, 1.5}], {-1.5, 0.}]}}}, {
             AspectRatio -> 0.75, Axes -> False, AxesLabel -> {
                FormBox[
                 StyleBox["x", {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}], TraditionalForm], 
                FormBox[
                 StyleBox["y", {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}], TraditionalForm]}, 
              ImageSize -> {220., {355.96747752497686`}}, 
              PlotRange -> {{-4., 4.}, {-3., 3.}}, PlotRangePadding -> 
              Scaled[0.04], Ticks -> False}, TicksStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1]], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Properties of ellipse", "scanner" -> "Geometry", "id" -> 
     "Properties", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"foci\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    SubscriptBox["x", "0"], "+", 
                    SqrtBox["7"]}], 
                    SubscriptBox["y", "0"]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    SubscriptBox["x", "0"], "-", 
                    SqrtBox["7"]}], 
                    SubscriptBox["y", "0"]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0], "\[NoBreak]", ")"}], "\[TildeTilde]", 
                    RowBox[{"(", "\[NoBreak]", 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    SubscriptBox["x", "0"], "+", "2.6457513110645907`"}], 
                    SubscriptBox["y", "0"]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    SubscriptBox["x", "0"], "-", "2.6457513110645907`"}], 
                    SubscriptBox["y", "0"]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0], "\[NoBreak]", ")"}]}]}, {
                    TagBox[
                    PaneBox[
                    "\"vertices\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    SubscriptBox["x", "0"], "+", "4"}], 
                    SubscriptBox["y", "0"]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    SubscriptBox["x", "0"], "-", "4"}], 
                    SubscriptBox["y", "0"]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0]}, {
                    TagBox[
                    PaneBox[
                    "\"covertices\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    SubscriptBox["x", "0"], 
                    RowBox[{
                    SubscriptBox["y", "0"], "+", "3"}]}, "RowWithSeparators"],
                     "\[NoBreak]", ")"}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    SubscriptBox["x", "0"], 
                    RowBox[{
                    SubscriptBox["y", "0"], "-", "3"}]}, "RowWithSeparators"],
                     "\[NoBreak]", ")"}]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0]}, {
                    TagBox[
                    PaneBox[
                    "\"semimajor axis length\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], "4"}, {
                    TagBox[
                    PaneBox[
                    "\"semiminor axis length\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], "3"}, {
                    TagBox[
                    PaneBox[
                    "\"area enclosed\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    RowBox[{"12", " ", "\[Pi]"}], "\[TildeTilde]", 
                    "37.69911184307752`"}]}, {
                    TagBox[
                    PaneBox[
                    "\"circumference\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    RowBox[{"16", " ", 
                    TemplateBox[{
                    FractionBox["7", "16"]}, "EllipticE"]}], "\[TildeTilde]", 
                    "22.103492160709504`"}]}, {
                    TagBox[
                    PaneBox[
                    "\"focal parameter\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    FractionBox["9", 
                    SqrtBox["7"]], "\[TildeTilde]", "3.401680257083045`"}]}, {
                    
                    TagBox[
                    PaneBox[
                    "\"eccentricity\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    FractionBox[
                    SqrtBox["7"], "4"], "\[TildeTilde]", 
                    "0.6614378277661477`"}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   TemplateBox[{"\"assuming\"", "\" \"", 
                    TemplateBox[{"\"center\"", "\" \"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    SubscriptBox["x", "0"], 
                    SubscriptBox["y", "0"]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}]}, "RowDefault"]}, "RowDefault"], 
                   "\[NoBreak]", "\")\""}], {
                 FontSize -> 10, FontFamily -> "Roboto", 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "Properties__More"}, {}]}]}], 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "spellcheck", {
       "word" -> "elipse", "suggestion" -> "ellipse", "text" -> 
        "Interpreting \"elipse\" as \"ellipse\""}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "4", "datatypes" -> "", "timedout" -> "Identity", 
     "timedoutpods" -> "", "timing" -> "2.481", "parsetiming" -> "0.392", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa513113chfd6a7h1bi07400005d2c9228a98bc4bg3172133347439184749", "id" -> 
     "MSP513213chfd6a7h1bi074000012hh42fhia7gc3e7", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "8", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa513313chfd6a7h1bi07400005b68bfc1ed8023a43172133347439184749", "version" -> 
     "2.6", "inputstring" -> 
     "circumference of elipse with semi-axes 4 and 3"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
     "", "timing" -> "1.839", "parsetimedout" -> "false", "recalculate" -> "",
      "id" -> "", "parseidserver" -> "19", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "19", "related" -> "", 
     "version" -> "2.6", "inputstring" -> 
     "circumference of elipse with semi-axes 4 and 3"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2024, 4, 3, 21, 48, 9.77975`7.742902739753698}, "Line" -> 11, 
    "SessionID" -> 28693052527504923396}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "ResourceFunction[\"EllipseProperties\"][Association[\"SemiAxisLengths\" \
-> {4, 3}], {x, y}][\"Circumference\"]"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "circumference of elipse with semi-axes 4 and 3"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{632., {1083., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa513113chfd6a7h1bi07400005d2c9228a98bc4bg3172133347439184749", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[5]:=",ExpressionUUID->"0b02d473-4eab-437d-a29d-d25b50b53ceb"],

Cell[BoxData[
 TemplateBox[{
  "ResourceFunction", "usermessage", 
   "\"\\!\\(\\*TemplateBox[List[StyleBox[RowBox[List[\\\"EllipseProperties\\\"\
, \\\"::\\\", \\\"insuf\\\"]], \\\"MessageName\\\"], \\\"\\\\\\\": \\\\\\\"\\\
\", TemplateBox[List[\\\"\\\\\\\"not enough information given to specify a \
unique ellipse.\\\\\\\"\\\"], \\\"RowDefault\\\"]], \\\"RowDefault\\\"]\\)\"",
    2, 5, 1, 28693495080540202889, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.921162480786119*^9, 3.921212226941921*^9},
 CellLabel->
  "During evaluation of \
In[5]:=",ExpressionUUID->"18a5c07a-c25b-4fb2-ac0e-c092b27fa285"],

Cell[BoxData[
 RowBox[{"16", " ", 
  RowBox[{"EllipticE", "[", 
   FractionBox["7", "16"], "]"}]}]], "Output",
 CellChangeTimes->{3.9211624807915573`*^9, 3.921212226945795*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"9da6a8a0-42f6-49d2-a897-201a0964379f"]
}, Open  ]],

Cell["\<\
Matej ima 512 jabolk, Jana pa 1024 jabolk. Koliko jabolk imata Matej in Jana \
skupaj?\
\>", "Text",
 CellChangeTimes->{{3.8242797559107485`*^9, 3.824279805450908*^9}, {
  3.824279994366373*^9, 
  3.824280011871313*^9}},ExpressionUUID->"9f1194a4-b35c-4ee6-8605-\
ef93f76b2ebe"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Matej has 512 apples, Jana has 1024 apples. How many apples do Matej and \
Jana have?", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Matej has \"", "512", "\" apples.\""}, 
                    "RowDefault"], {LineIndent -> 0, 
                    LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {None, None}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {1 -> None, -1 -> None}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                    AllowScriptLevelChange -> False], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]]}, {
                    TagBox[
                    GridBox[{{
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    
                    TemplateBox[{"\"Jana has \"", "1024", "\" apples.\""}, 
                    "RowDefault"], {LineIndent -> 0, 
                    LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {None, None}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {1 -> None, -1 -> None}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                    AllowScriptLevelChange -> False], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]]}, {
                    TagBox[
                    GridBox[{{
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"How many apples do Jana and Matej have?\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {None, None}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {1 -> None, -1 -> None}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                    AllowScriptLevelChange -> False], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> Center, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.3}}}], 
                    "Column"], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> 
     "MathWordProblems", "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TemplateBox[{"\"Jana and Matej\"", 
                    StyleBox["\" have\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", "1536", "\" apples\""}, "RowDefault"], 
                  StyleBox["\".\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Calculations", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "MathWordProblems", "title" -> 
     "Calculation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\"\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              TemplateBox[{2}, "Spacer1"], 
              
              TemplateBox[{
               "1024", "\" + \"", "512", "\" \[LongEqual] \"", "1536"}, 
               "RowDefault"]}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.2670000000000001", "parsetiming" -> "1.08", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP1116814gfif8g2d852fdf00001g00f6f08cg06gge", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "16", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa1116914gfif8g2d852fdf000017f9geeideh1a30i8350669649384844499", "version" -> 
    "2.6", "inputstring" -> 
    "Matej has 512 apples, Jana has 1024 apples. How many apples do Matej and \
Jana have"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2024, 4, 3, 21, 48, 38.545113`8.338544301994947}, "Line" -> 11,
     "SessionID" -> 28693052527504923396}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "Matej has 512 apples, Jana has 1024 apples. How many apples do Matej and \
Jana have?"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{402., {47., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[6]:=",ExpressionUUID->"0b678967-de53-4250-96fe-a032146f7f49"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     StyleBox[GridBox[{
        {
         TemplateBox[{
           TemplateBox[{"\"Jana and Matej\"", 
             StyleBox["\" have\"", {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], "\" \"", "1536", "\" apples\""}, 
            "RowDefault"], 
           StyleBox["\".\"", {
             GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
             LineIndent -> 0}]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{"Graphics", FontFamily -> "Times"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Matej has 512 apples, Jana has 1024 apples. How many apples do Matej and \
Jana have?", {{"Result", 1}, "Content"}]]], "Output",
 CellChangeTimes->{3.921162520693471*^9, 3.921212230593915*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"82761088-99fc-45b3-b0d3-23b65261a19f"]
}, Open  ]],

Cell["\<\
Ali je 1009 pra\[SHacek]tevilo? Izra\[CHacek]unaj vsoto \
1/2+1/3+1/5+1/7+1/11+...+1/1009. Kaj predstavlja ta vsota?\
\>", "Text",
 CellChangeTimes->{{3.824280056484812*^9, 3.824280103617164*^9}, {
  3.824280171584229*^9, 3.824280190379066*^9}, {3.824280231570858*^9, 
  3.824280231771147*^9}},ExpressionUUID->"24a6c4ca-0f0c-4b8f-a12e-\
05d204188a17"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = " 1009 is prime", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", "PrimeQ[1009]"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"PrimeQ[1009]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{
                    StyleBox["\"is \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TagBox["1009", HoldForm], 
                    StyleBox["\" a \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\"prime number?\""}, "RowDefault"], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {
                    "Columns" -> {None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {None, None}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {1 -> None, -1 -> None}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Primes", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"PrimeQ[1009]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox["1009", HoldForm], 
              StyleBox["\" is a\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              StyleBox[
              "\" prime number\"", {
               LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                0}]}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "prime", "template" -> 
        "Assuming \"prime\" is referring to prime numbers${separator}Use as \
${desc} instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"prime\"} -> {\"PrimesTypeWord\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "PrimesTypeWord", "desc" -> " referring to prime numbers", 
          "input" -> "{\"C\", \"prime\"} -> {\"PrimesTypeWord\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "RandomKeyword", "desc" -> " referring to random examples",
           "input" -> "{\"C\", \"prime\"} -> {\"RandomKeyword\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.462", "parsetiming" -> "0.273", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP1061420acc78iidc7c43400004h7433fh5ha5g583", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "2", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa1061520acc78iidc7c43400002f0ahf6fc1984g34724077331436509559", "version" -> 
    "2.6", "inputstring" -> "1009 is prime"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2024, 4, 3, 21, 49, 8.236845`7.668335880534998}, "Line" -> 13, 
    "SessionID" -> 28693052527504923396}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", "PrimeQ[1009]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = " 1009 is prime"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {326., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[7]:=",ExpressionUUID->"37eb6a1f-914b-438d-8c12-0ffc7fe2e4d9"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.92116254363774*^9, 3.921212230732319*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"e0c69144-202d-4c18-9b0e-d8fca12bdaf6"],

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["SequenceToSum", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{11., {1., 10.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{11., {1., 10.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["SequenceToSum", "ResourceFunctionLabel"], " "}],
                   
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"3.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/9b666ac7-2749-49c6-add1-9b2f64099a97/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "SequenceToSum"},
    TagBoxNote->"FunctionResourceBox"],
   ResourceFunction["SequenceToSum"],
   Selectable->False], "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox["1", "3"], ",", 
     FractionBox["1", "5"], ",", 
     FractionBox["1", "7"], ",", 
     FractionBox["1", "11"], ",", "\[Ellipsis]", ",", 
     FractionBox["1", "1009"]}], "}"}], ",", "n"}], "]"}]], "Output",
 CellChangeTimes->{{3.9212123135199547`*^9, 3.921212328647453*^9}, {
  3.921212376684465*^9, 3.921212391708604*^9}},
 CellLabel->"Out[30]=",ExpressionUUID->"d5c947b6-4832-4a6a-8242-4ec272157fd5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga 10", "Section",
 CellChangeTimes->{{3.824280024587415*^9, 3.8242800277175612`*^9}, {
  3.82428030154875*^9, 3.824280302737523*^9}, {3.950251979584344*^9, 
  3.950251980382469*^9}},ExpressionUUID->"629abf72-e852-4f15-87ba-\
7000a8cf9ac7"],

Cell["Naslednje naloge re\[SHacek]i z vnosom z naravnim jezikom.", "Text",
 CellChangeTimes->{{3.824280452512235*^9, 
  3.824280473332304*^9}},ExpressionUUID->"987f9554-893c-49c0-bc27-\
237f617aea54"],

Cell[CellGroupData[{

Cell["Naloge", "Subsection",
 CellChangeTimes->{{3.824280575592417*^9, 
  3.824280593798018*^9}},ExpressionUUID->"5a900361-76d0-4307-81f2-\
8da963fdc964"],

Cell["Dolo\[CHacek]i povr\[SHacek]ino Slovenije in skupno dol\[ZHacek]no \
njene meje.", "Text",
 CellChangeTimes->{{3.8242805969743814`*^9, 
  3.824280652236888*^9}},ExpressionUUID->"db032099-64e9-4112-a0bb-\
798c9ee6e023"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Area of Slovenia", Typeset`newq$$ = 
   "Area of Slovenia", Typeset`chosen$$ = 
   "Entity[\"Country\", \"Slovenia\"][EntityProperty[\"Country\", \"Area\"]]",
    Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Area of Slovenia", 
                  Defer[
                   Entity["Country", "Slovenia"][
                    EntityProperty["Country", "Area"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""}, 
                    "EntityProperty"], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Area of Slovenia", 
                    Defer[
                    Entity["Country", "Slovenia"][
                    EntityProperty["Country", "Area"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""}, 
                    "EntityProperty"], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[8]:=",ExpressionUUID->"54536914-0a1a-4c8a-98d3-cbd71b98d11d"],

Cell[BoxData[
 TemplateBox[{"20273.`4.", 
   RowBox[{
     SuperscriptBox["\"km\"", "2"]}], "kilometers squared", 
   SuperscriptBox["\"Kilometers\"", "2"]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.921211639440206*^9, 3.9212122312168913`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"09328fec-078b-4a2c-b6f8-6f783227ad88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Border length of Slovenia", 
   Typeset`newq$$ = "Border length of Slovenia", Typeset`chosen$$ = 
   "Entity[\"Country\", \"Slovenia\"][EntityProperty[\"Country\", \
\"BoundaryLength\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Border length of Slovenia", 
                  Defer[
                   Entity["Country", "Slovenia"][
                    EntityProperty["Country", "BoundaryLength"]]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"full boundary length\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"BoundaryLength\""}], "]"}],
                     "\"EntityProperty[\\\"Country\\\", \
\\\"BoundaryLength\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"full boundary length\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"BoundaryLength\""}], "]"}],
                     "\"EntityProperty[\\\"Country\\\", \
\\\"BoundaryLength\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"full boundary length\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"BoundaryLength\""}], "]"}],
                     "\"EntityProperty[\\\"Country\\\", \
\\\"BoundaryLength\\\"]\""}, "EntityProperty"], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Border length of Slovenia", 
                    Defer[
                    Entity["Country", "Slovenia"][
                    EntityProperty["Country", "BoundaryLength"]]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"full boundary length\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"BoundaryLength\""}], "]"}],
                     "\"EntityProperty[\\\"Country\\\", \
\\\"BoundaryLength\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"full boundary length\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"BoundaryLength\""}], "]"}],
                     "\"EntityProperty[\\\"Country\\\", \
\\\"BoundaryLength\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"full boundary length\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"BoundaryLength\""}], "]"}],
                     "\"EntityProperty[\\\"Country\\\", \
\\\"BoundaryLength\\\"]\""}, "EntityProperty"], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[9]:=",ExpressionUUID->"1f0eb806-58fb-4450-b44f-8806619ca903"],

Cell[BoxData[
 TemplateBox[{"1132.6`", "\"km\"", "kilometers", "\"Kilometers\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.921211652944693*^9, 3.921212231245487*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"a6416805-e910-409a-8a3a-36616e32c37c"]
}, Open  ]],

Cell["Koliko Slovenij prekrije povr\[SHacek]ino Rusije?", "Text",
 CellChangeTimes->{{3.824280667292456*^9, 3.8242806783029656`*^9}, {
  3.824280833863787*^9, 3.824280836015839*^9}, {3.921211694452674*^9, 
  3.92121169625245*^9}},ExpressionUUID->"94448fa0-8c4d-430d-b766-\
afdd0c665cfe"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "how many areas of Slovenia cover area of Russia", Typeset`newq$$ = 
   "how many areas of Slovenia cover area of Russia", Typeset`chosen$$ = 
   "{Entity[\"Country\", \"Slovenia\"][EntityProperty[\"Country\", \
\"Area\"]], Entity[\"Country\", \"Russia\"][EntityProperty[\"Country\", \
\"Area\"]]}", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "how many areas of Slovenia cover area of Russia", 
                  Defer[{
                    Entity["Country", "Slovenia"][
                    EntityProperty["Country", "Area"]], 
                    Entity["Country", "Russia"][
                    EntityProperty["Country", "Area"]]}], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}], ",", " ", 
                   RowBox[{
                    TemplateBox[{"\"Russia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Russia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Russia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}]}], "}"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}], ",", " ", 
                   RowBox[{
                    TemplateBox[{"\"Russia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Russia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Russia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}]}], "}"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""}, 
                    "EntityProperty"], "]"}], ",", " ", 
                    RowBox[{
                    TemplateBox[{"\"Russia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Russia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Russia\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""}, 
                    "EntityProperty"], "]"}]}], "}"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "how many areas of Slovenia cover area of Russia", 
                    Defer[{
                    Entity["Country", "Slovenia"][
                    EntityProperty["Country", "Area"]], 
                    Entity["Country", "Russia"][
                    EntityProperty["Country", "Area"]]}], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}], ",", " ", 
                    RowBox[{
                    TemplateBox[{"\"Russia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Russia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Russia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}]}], "}"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}], ",", " ", 
                    RowBox[{
                    TemplateBox[{"\"Russia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Russia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Russia\\\"]\"", 
                    "\"country\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""},
                    "EntityProperty"], "]"}]}], "}"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    TemplateBox[{"\"Slovenia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Slovenia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Slovenia\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""}, 
                    "EntityProperty"], "]"}], ",", " ", 
                    RowBox[{
                    TemplateBox[{"\"Russia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Russia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Russia\\\"]\"", 
                    "\"country\""}, "Entity"], "[", 
                    TemplateBox[{"\"total area\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Country\"", ",", "\"Area\""}], "]"}], 
                    "\"EntityProperty[\\\"Country\\\", \\\"Area\\\"]\""}, 
                    "EntityProperty"], "]"}]}], "}"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[10]:=",ExpressionUUID->"917900ee-f89c-4b83-9253-cdb55917f7a3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"20273.`4.", 
     RowBox[{
       SuperscriptBox["\"km\"", "2"]}], "kilometers squared", 
     SuperscriptBox["\"Kilometers\"", "2"]},
    "Quantity"], ",", 
   TemplateBox[{"1.7098242`4.*^7", 
     RowBox[{
       SuperscriptBox["\"km\"", "2"]}], "kilometers squared", 
     SuperscriptBox["\"Kilometers\"", "2"]},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.921211685023829*^9, 3.921211717679021*^9, {3.921211770320362*^9, 
   3.9212117868867826`*^9}, 3.9212122312657537`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"857dd8e9-d8de-424d-abd8-fdfd04419ac3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Divide the area of Russia over area of Slovenia", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Output", "843."}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"Country\", \"Russia\"][EntityProperty[\"Country\", \
\"Area\"]]/Entity[\"Country\", \"Slovenia\"][EntityProperty[\"Country\", \
\"Area\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              FormBox[
               TagBox[
                GridBox[{{
                   PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"Russia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Russia"}]], Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"total area\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 ColumnsEqual -> False, RowsEqual -> False, 
                 GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                 AllowScriptLevelChange -> False], 
                $CellContext`TagBoxWrapper["Separator" -> " | "]], 
               TraditionalForm], 
              FormBox[
               TagBox[
                GridBox[{{
                   PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"Slovenia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Slovenia"}]], Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    "\"total area\""}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 ColumnsEqual -> False, RowsEqual -> False, 
                 GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                 AllowScriptLevelChange -> False], 
                $CellContext`TagBoxWrapper["Separator" -> " | "]], 
               TraditionalForm]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Data", "title" -> 
     "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CountryData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CIAFactbook"}], "\n   "}], 
       XMLElement["moutput", {}, {"843."}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              TagBox[
               TagBox[
                TagBox[
                 RowBox[{
                   TagBox["843", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "843", "SRString" -> "843"]]}], Identity,
                  TagBoxNote -> {"Hyperlink" -> "843"}], #& , SyntaxForm -> 
                Dot], "Unit", SyntaxForm -> Dot], 
              LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 0, 
              ZeroWidthTimes -> False], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show details", "input" -> "Result__Show details"}, {}]}]}],
    Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["userinfoused", {"count" -> "1"}, {"\n  ", 
      XMLElement["userinfo", {"name" -> "Units"}, {}], "\n "}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
CountryDataSourceInformationNotes.html", "text" -> "Country data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Country,Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "0.936", "parsetiming" -> "0.654", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP84901ceeae7fh36cb98e00005ach5b85cfg54db9", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa84911ceeae7fh36cb98e00003085g14e1ad2gcig6249686130609588165", "version" -> 
    "2.6", "inputstring" -> 
    "Divide the area of Russia over area of Slovenia"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2024, 4, 4, 11, 30, 33.347871`8.2756430930004}, "Line" -> 20, 
    "SessionID" -> 28693466126356713022}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Output", "843."}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Divide the area of Russia over area of Slovenia"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{291., {53., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[11]:=",ExpressionUUID->"2e450780-8ca4-4fa2-8aa9-7e4ac8932927"],

Cell[BoxData["843.`"], "Output",
 CellChangeTimes->{{3.921211814578611*^9, 3.921211833365906*^9}, 
   3.921212231270124*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"fbfaddf2-d044-4024-80b4-6139848538bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["how many areas of Slovenia cover area of Russia", "WolframAlphaLong",
 CellChangeTimes->{{3.921211859053114*^9, 3.921211859839091*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"84175573-e196-4781-acd6-feb434530f94"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "how many areas of Slovenia cover area of Russia", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Data", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Entity[\"Country\", \"Slovenia\"][EntityProperty[\"Country\", \
\"Area\"]], Entity[\"Country\", \"Russia\"][EntityProperty[\"Country\", \
\"Area\"]]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"Slovenia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Slovenia"}]], Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}, {
                    StyleBox[
                    TagBox[
                    TagBox["\"Russia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Russia"}]], Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 
                    Automatic], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center], 
                  PaneBox[
                   StyleBox[
                    TagBox[
                    
                    GridBox[{{"\"total area\""}}, 
                    GridBoxBackground -> {
                    "Columns" -> {None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], HoldForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Data", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CountryData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CIAFactbook"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Slovenia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Slovenia"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> 1, FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> 1], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["20273", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "20273", "SRString" -> "20273"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"km\"", "2"], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"square kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox[
                    TagBox["\"Russia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Russia"}]], Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> 1, FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> 1], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"1.71", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "7"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"1.71", "\[Times]", 
                    SuperscriptBox["10", "7"]}], "SRString" -> 
                    "1.71 times 10 to the 7"], SyntaxForm -> CenterDot], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"km\"", "2"], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"square kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "Result__Show non-metric"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Relative values", "scanner" -> "Data", "id" -> 
     "Comparisons:Area:CountryData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CountryData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"CIAFactbook"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   StyleBox["\"visual\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   StyleBox["\"ratios\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "\[SpanFromLeft]", 
                 TagBox[
                  PaneBox[
                   StyleBox["\"comparisons\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 StyleBox[
                  TagBox[
                   TagBox["\"Russia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Russia"}]], Identity], {
                  FontColor -> GrayLevel[0.3]}, StripOnInput -> False], 
                 GraphicsBox[{
                   EdgeForm[
                    GrayLevel[0.7]], 
                   GrayLevel[0.9], 
                   RectangleBox[{0, 0}, {0.4, 0.08}], 
                   GrayLevel[1], 
                   RectangleBox[{0.4, 0}, {0.4, 0.08}]}, 
                  PlotRange -> {{0, 0.52}, {-0.02, 0.09}}, ImageSize -> 60, 
                  TicksStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]], 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["843.4", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "843.4", "SRString" -> "843.4"]]}], 
                    Identity, TagBoxNote -> {"Hyperlink" -> "843.4"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity], "1", 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["84240", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "84240", "SRString" -> "84240"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 
                   StyleBox["\" larger\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                 StyleBox[
                  TagBox[
                   TagBox["\"Slovenia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Slovenia"}]], Identity], {
                  FontColor -> GrayLevel[0.3]}, StripOnInput -> False], 
                 GraphicsBox[{
                   EdgeForm[
                    GrayLevel[0.7]], 
                   GrayLevel[0.9], 
                   RectangleBox[{0, 0}, {0.0004742709806072461, 0.08}], 
                   GrayLevel[1], 
                   RectangleBox[{0.0004742709806072461, 0}, {0.4, 0.08}]}, 
                  PlotRange -> {{0, 0.52}, {-0.02, 0.09}}, ImageSize -> 60, 
                  TicksStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]], "1", 
                 TagBox[
                  StyleBox[
                   TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["0.001186", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.001186", "SRString" -> "0.001186"]]}],
                     Identity, 
                    TagBoxNote -> {"Hyperlink" -> "0.001186"}], #& , 
                    SyntaxForm -> Dot], "Unit", SyntaxForm -> Dot], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0, ZeroWidthTimes -> False], Identity], 
                 TemplateBox[{
                   StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["99.88", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "99.88", "SRString" -> "99.88"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], 
                   StyleBox["\" smaller\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Right, Right, Left}, 
                 "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}, {1, 5} -> {Center, Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Reverse", "input" -> 
         "Comparisons:Area:CountryData__Reverse"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "areas Slovenia cover vs area vs Russia", "score" -> "0.6", "level" -> 
        "scorelevel"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
CountryDataSourceInformationNotes.html", "text" -> "Country data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Country", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.7830000000000001", "parsetiming" -> 
    "0.", "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP44221hb98g9d42c81gh30000644a1aedf12688af", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "9", "related" -> "", 
    "version" -> "2.6", "inputstring" -> 
    "how many areas of Slovenia cover area of Russia"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2024, 4, 4, 11, 37, 13.623324`7.886858071071238}, "Line" -> 12,
     "SessionID" -> 28693495080540202889}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "how many areas of Slovenia cover area of Russia"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1640., {234., 239.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.9212122336517143`*^9},ExpressionUUID->"e19c020b-c27a-4ceb-a649-\
cf0dbd3db5e6"]
}, Open  ]],

Cell["Kolik\[SHacek]na je temperatura sonca?", "Text",
 CellChangeTimes->{{3.824281158263304*^9, 3.824281193732393*^9}, {
  3.824281309914006*^9, 
  3.824281312404889*^9}},ExpressionUUID->"5297277d-2397-41ac-8949-\
9ba403c50290"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "Temperature of sun", Typeset`newq$$ = 
   "Temperature of sun", Typeset`chosen$$ = 
   "Entity[\"Star\", \"Sun\"][EntityProperty[\"Star\", \"EffectiveTemperature\
\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = True}, 
     
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse[
              "Temperature of sun", 
               Defer[
                Entity["Star", "Sun"][
                 EntityProperty["Star", "EffectiveTemperature"]]], 
               "Fast parse"]; Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[Typeset`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "Temperature of sun", 
                  Defer[
                   Entity["Star", "Sun"][
                    EntityProperty["Star", "EffectiveTemperature"]]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"effective temperature\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"EffectiveTemperature\""}], 
                    "]"}], "\"EntityProperty[\\\"Star\\\", \
\\\"EffectiveTemperature\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{
                  TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                   "Entity"], "[", 
                  TemplateBox[{"\"effective temperature\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"EffectiveTemperature\""}], 
                    "]"}], "\"EntityProperty[\\\"Star\\\", \
\\\"EffectiveTemperature\\\"]\""},
                   "EntityProperty"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{
                    TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, 
                    "Entity"], "[", 
                    TemplateBox[{"\"effective temperature\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"EffectiveTemperature\""}], 
                    "]"}], "\"EntityProperty[\\\"Star\\\", \
\\\"EffectiveTemperature\\\"]\""}, "EntityProperty"], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], "MouseExited" :> 
        FEPrivate`Set[Typeset`show$$, False], Method -> "Preemptive", 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{Typeset`show$$ = False, Typeset`assumptionsQ$$ = 
         True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  "Temperature of sun", 
                   Defer[
                    Entity["Star", "Sun"][
                    EntityProperty["Star", "EffectiveTemperature"]]], 
                   "Fast parse"]; Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  Typeset`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "Temperature of sun", 
                    Defer[
                    Entity["Star", "Sun"][
                    EntityProperty["Star", "EffectiveTemperature"]]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"effective temperature\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"EffectiveTemperature\""}], 
                    "]"}], "\"EntityProperty[\\\"Star\\\", \
\\\"EffectiveTemperature\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{
                    TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"effective temperature\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"EffectiveTemperature\""}], 
                    "]"}], "\"EntityProperty[\\\"Star\\\", \
\\\"EffectiveTemperature\\\"]\""},
                    "EntityProperty"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{
                    TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, 
                    "Entity"], "[", 
                    TemplateBox[{"\"effective temperature\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"EffectiveTemperature\""}], 
                    "]"}], "\"EntityProperty[\\\"Star\\\", \
\\\"EffectiveTemperature\\\"]\""}, "EntityProperty"], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> FEPrivate`Set[Typeset`show$$, True], 
            "MouseExited" :> FEPrivate`Set[Typeset`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[13]:=",ExpressionUUID->"932c4878-0f95-4a31-9eea-bda7c6e48790"],

Cell[BoxData[
 TemplateBox[{"5772.`4.", "\"K\"", "kelvins", "\"Kelvins\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.921211897887442*^9, 3.921212233826119*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"7f171c96-b8ef-4eea-9897-b4561e2b1226"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1728, 1051},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.0 for Mac OS X ARM (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"e3fcc150-680c-42ed-b355-4f3521243a63"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 256, 4, 98, "Title",ExpressionUUID->"b1059ef0-fbac-4351-b8b5-fe69a5692763"],
Cell[839, 28, 249, 4, 35, "Text",ExpressionUUID->"7e568ee6-ede1-4ad7-b3fc-12c1699f12c8"],
Cell[CellGroupData[{
Cell[1113, 36, 255, 4, 67, "Section",ExpressionUUID->"c159c23f-38af-450e-959e-4238adb34fbd"],
Cell[1371, 42, 273, 6, 35, "Text",ExpressionUUID->"317ec6b2-4fba-479a-b764-8dbcb39d045f"],
Cell[1647, 50, 250, 4, 30, "Input",ExpressionUUID->"f45fbcd6-341a-41ab-8ad8-c0ea8057f557"],
Cell[1900, 56, 1999, 48, 199, "Input",ExpressionUUID->"43aa2257-2ea2-48e1-942f-e6f9c9901bf0"],
Cell[3902, 106, 940, 23, 73, "Input",ExpressionUUID->"34648430-eba5-4751-9ecb-785b92b9222d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4879, 134, 255, 4, 67, "Section",ExpressionUUID->"95ae1cb0-793f-4738-ba37-8495cb33ccee"],
Cell[5137, 140, 439, 9, 35, "Text",ExpressionUUID->"f1e0cfbd-acf5-4bb7-9ea9-c95a6e8e3c22"],
Cell[CellGroupData[{
Cell[5601, 153, 843, 23, 52, "Input",ExpressionUUID->"b0b6121c-be29-4c01-84a2-225e154d8bca"],
Cell[6447, 178, 439, 9, 34, "Output",ExpressionUUID->"b30524b9-ae3a-4ab3-a4dc-00db48c03a49"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6935, 193, 205, 4, 67, "Section",ExpressionUUID->"4d7761ed-10f9-4931-b557-36737375a948"],
Cell[7143, 199, 666, 12, 58, "Text",ExpressionUUID->"bbc1863b-74b2-4f29-b850-6def6252bc54"],
Cell[7812, 213, 614, 15, 30, "Input",ExpressionUUID->"796258d1-dbfe-44df-9957-5147ed77cc7a"],
Cell[CellGroupData[{
Cell[8451, 232, 329, 5, 30, "Input",ExpressionUUID->"e6e40f69-4cc1-4efd-a4ae-aea318a5174c"],
Cell[8783, 239, 517, 11, 34, "Output",ExpressionUUID->"c131374c-1cf7-436b-8346-9397a80955f0"]
}, Open  ]],
Cell[9315, 253, 821, 17, 30, "Input",ExpressionUUID->"3ff330ef-b7e2-45aa-9976-8be76c3e5efe"],
Cell[CellGroupData[{
Cell[10161, 274, 272, 4, 30, "Input",ExpressionUUID->"42cfbb2d-168c-47bc-89c9-7e67150e7da3"],
Cell[10436, 280, 441, 9, 34, "Output",ExpressionUUID->"e8549cb7-bff7-462d-a7a4-e3325dc74319"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10926, 295, 250, 4, 67, "Section",ExpressionUUID->"050253b4-28d8-440a-9515-c847daabc761"],
Cell[11179, 301, 722, 14, 81, "Text",ExpressionUUID->"20070092-6fb9-4e4a-8e1a-d0a625226068"],
Cell[CellGroupData[{
Cell[11926, 319, 1978, 50, 136, "Input",ExpressionUUID->"22cf30f2-2d19-4634-95fe-9f21481bf10b"],
Cell[13907, 371, 426, 7, 34, "Output",ExpressionUUID->"229e67b7-23f3-4714-91e7-02d52141698d"],
Cell[14336, 380, 426, 7, 34, "Output",ExpressionUUID->"b4e5aacc-936d-4b22-81e8-12d4a91189e8"],
Cell[14765, 389, 23365, 429, 242, "Output",ExpressionUUID->"51498ae9-cbf1-46a0-b920-8d74fa02a683"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[38179, 824, 251, 4, 67, "Section",ExpressionUUID->"41d21403-a04a-4f2c-b37b-968c7f0ac171"],
Cell[38433, 830, 468, 10, 104, "Text",ExpressionUUID->"dffccb33-fe4d-41fe-a1fd-4315b1baf132"],
Cell[38904, 842, 564, 16, 52, "Input",ExpressionUUID->"320f1dd9-893a-425b-a315-ff9aa2f337d7"],
Cell[39471, 860, 1089, 32, 73, "Input",ExpressionUUID->"e4972d5d-2c96-4a5f-a387-a6170d9cf999"],
Cell[40563, 894, 616, 16, 52, "Input",ExpressionUUID->"fbf9b13d-195b-4349-b10e-6e2d61f4cd96"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41216, 915, 255, 4, 67, "Section",ExpressionUUID->"37655d52-a1b3-4408-9591-8b0a22cc0d5c"],
Cell[41474, 921, 467, 9, 35, "Text",ExpressionUUID->"cb1e7497-e2fe-4b4d-8a91-1c5b2901b537"],
Cell[CellGroupData[{
Cell[41966, 934, 851, 25, 52, "Input",ExpressionUUID->"aed88f6b-8c9a-4360-b530-5d7b9a79ef41"],
Cell[42820, 961, 43300, 760, 240, "Output",ExpressionUUID->"fbb3258e-c798-433c-a38b-49a28417ddf2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[86169, 1727, 251, 4, 67, "Section",ExpressionUUID->"9059f268-88ed-46fa-9f80-f2f54b64459f"],
Cell[86423, 1733, 3687, 95, 186, "Text",ExpressionUUID->"09c2cc28-ce83-4e5a-ae08-b7e193d44db1"],
Cell[90113, 1830, 284, 6, 30, "Input",ExpressionUUID->"cdf0d52a-f2a4-44a7-9fc3-c00c88d5a0fb"],
Cell[90400, 1838, 1260, 29, 30, "Input",ExpressionUUID->"85d94bec-9dcb-4754-8b50-76431b6f2f30"],
Cell[CellGroupData[{
Cell[91685, 1871, 838, 17, 52, "Input",ExpressionUUID->"3054748c-2294-428a-8fd6-8935ce669b7e"],
Cell[92526, 1890, 1669, 27, 60, "Output",ExpressionUUID->"97403ea6-83b9-4b12-bab8-82d3d667b0dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94232, 1922, 604, 13, 52, "Input",ExpressionUUID->"cd43bfee-4c97-45ef-9d21-329ffce3e398"],
Cell[94839, 1937, 5756, 128, 236, "Output",ExpressionUUID->"ab12a133-0ae2-4450-b2b6-1a872b95a7f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100632, 2070, 578, 11, 30, "Input",ExpressionUUID->"490768f6-9616-4311-a205-6a005c5a5575"],
Cell[101213, 2083, 327, 5, 34, "Output",ExpressionUUID->"5e0e080e-4024-4369-8424-aa5739331b94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101577, 2093, 454, 11, 30, "Input",ExpressionUUID->"60d3bfe4-1369-4711-aa9d-644eb5b4b746"],
Cell[102034, 2106, 199, 5, 54, "Output",ExpressionUUID->"c0f229f3-3829-493e-bf8f-8f75a3853489"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102270, 2116, 537, 13, 30, "Input",ExpressionUUID->"33c68b12-bb00-469f-a761-4535f5b11beb"],
Cell[102810, 2131, 171, 3, 34, "Output",ExpressionUUID->"d001bb60-59ae-4490-8389-1329cc8647e4"]
}, Open  ]],
Cell[102996, 2137, 654, 14, 30, "Input",ExpressionUUID->"e75cf3e6-e1ac-4469-954e-166432c9f70c"],
Cell[CellGroupData[{
Cell[103675, 2155, 309, 6, 30, "Input",ExpressionUUID->"58f6ff54-74f9-49da-b58e-823b6f839ad2"],
Cell[103987, 2163, 389, 6, 34, "Output",ExpressionUUID->"a72051b0-ecac-47ba-8a02-15521e57276b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[104425, 2175, 205, 4, 67, "Section",ExpressionUUID->"001fb09d-ccbc-4661-a3ca-e9d44d7bf591"],
Cell[104633, 2181, 1005, 28, 51, "Text",ExpressionUUID->"8d203725-5855-4045-932d-9d90bc4d9147"],
Cell[105641, 2211, 1459, 35, 62, "Text",ExpressionUUID->"ff60a0a7-11ee-48d6-b489-4c82183e7e1f"],
Cell[107103, 2248, 257, 4, 30, "Input",ExpressionUUID->"b7c6acc0-b2fc-4a73-8169-66c730772605"],
Cell[107363, 2254, 665, 18, 52, "Input",ExpressionUUID->"167deaf7-7b17-41a6-814e-f2b05c31f9a9"],
Cell[CellGroupData[{
Cell[108053, 2276, 565, 11, 30, "Input",ExpressionUUID->"d8b81339-e667-4137-a71f-676314e304a5"],
Cell[108621, 2289, 4691, 139, 87, "Output",ExpressionUUID->"bd5858cf-854a-42f0-a618-b3f7557e906a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113349, 2433, 427, 7, 30, "Input",ExpressionUUID->"820bc61e-ac48-4a03-9df5-4bd05bc89882"],
Cell[113779, 2442, 2380, 69, 82, "Output",ExpressionUUID->"e76ce9f5-d641-4470-ab6c-45ac5c3d5413"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[116208, 2517, 154, 3, 67, "Section",ExpressionUUID->"9f2bc02c-e835-4418-8d6f-c5e777a34102"],
Cell[116365, 2522, 1876, 51, 49, "Text",ExpressionUUID->"63352993-628e-4bab-8dd3-c3f0ebc13166"],
Cell[CellGroupData[{
Cell[118266, 2577, 822, 23, 30, "Input",ExpressionUUID->"f3c199db-3b5a-4841-8850-a0a15e787615"],
Cell[119091, 2602, 246, 5, 34, "Output",ExpressionUUID->"7acd2317-5336-4ebf-b8f2-30af04d841bd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[119386, 2613, 204, 4, 67, "Section",ExpressionUUID->"f3fb7d76-9945-4ec4-9a16-f63bf2204a94"],
Cell[119593, 2619, 498, 9, 35, "Text",ExpressionUUID->"b901e2ae-d41c-4421-98bd-a2daaa0d1276"],
Cell[CellGroupData[{
Cell[120116, 2632, 204, 4, 54, "Subsection",ExpressionUUID->"3f0d8c0c-05d0-479b-9dd5-548edc607c38"],
Cell[120323, 2638, 247, 6, 35, "Text",ExpressionUUID->"ddf27002-cc35-4f77-b38e-61e93fec7506"],
Cell[CellGroupData[{
Cell[120595, 2648, 19249, 409, 396, "WolframAlphaShortInput",ExpressionUUID->"e278e9a2-d22a-44e1-8ce0-5629702f6379"],
Cell[139847, 3059, 174, 2, 34, "Output",ExpressionUUID->"70d57097-c4bd-41b4-b030-c07bb05d8812"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[140070, 3067, 158, 3, 54, "Subsection",ExpressionUUID->"d521e3cc-4c08-41e6-b8fa-ee5a2286b93c"],
Cell[140231, 3072, 268, 5, 35, "Text",ExpressionUUID->"dac08833-3c6c-448d-8634-4d98fefe68b7"],
Cell[CellGroupData[{
Cell[140524, 3081, 19637, 419, 414, "WolframAlphaShortInput",ExpressionUUID->"48998f59-abca-4a71-bda1-64e8ea2923bb"],
Cell[160164, 3502, 197, 3, 34, "Output",ExpressionUUID->"fa559b15-69de-45a2-bd81-0ee17227febf"]
}, Open  ]],
Cell[160376, 3508, 355, 7, 35, "Text",ExpressionUUID->"3392e64e-fca8-44d4-aa16-be74f992aea2"],
Cell[CellGroupData[{
Cell[160756, 3519, 60587, 1151, 90, "WolframAlphaShortInput",ExpressionUUID->"daf06442-3bfe-4e5d-a660-b193d7ac5b1f"],
Cell[221346, 4672, 7824, 197, 39, "Output",ExpressionUUID->"ca22722a-88b5-4bcb-9c49-30517f9765f1"]
}, Open  ]],
Cell[229185, 4872, 281, 4, 35, "Text",ExpressionUUID->"5b959454-9038-4558-8d25-6ecfabd991b6"],
Cell[CellGroupData[{
Cell[229491, 4880, 55219, 1066, 712, "WolframAlphaShortInput",ExpressionUUID->"eae7e27d-183e-47e5-b1cf-68b82f4c037d"],
Cell[284713, 5948, 246, 5, 49, "Output",ExpressionUUID->"b5007728-5af9-46d6-8724-29970ac26f31"]
}, Open  ]],
Cell[284974, 5956, 286, 7, 35, "Text",ExpressionUUID->"5c629ebf-f2d1-4916-9c42-b4af33268a3c"],
Cell[CellGroupData[{
Cell[285285, 5967, 33441, 646, 1117, "WolframAlphaShortInput",ExpressionUUID->"0b02d473-4eab-437d-a29d-d25b50b53ceb"],
Cell[318729, 6615, 635, 12, 28, "Message",ExpressionUUID->"18a5c07a-c25b-4fb2-ac0e-c092b27fa285"],
Cell[319367, 6629, 254, 5, 49, "Output",ExpressionUUID->"9da6a8a0-42f6-49d2-a897-201a0964379f"]
}, Open  ]],
Cell[319636, 6637, 287, 7, 35, "Text",ExpressionUUID->"9f1194a4-b35c-4ee6-8605-ef93f76b2ebe"],
Cell[CellGroupData[{
Cell[319948, 6648, 17057, 327, 81, "WolframAlphaShortInput",ExpressionUUID->"0b678967-de53-4250-96fe-a032146f7f49"],
Cell[337008, 6977, 2102, 53, 56, "Output",ExpressionUUID->"82761088-99fc-45b3-b0d3-23b65261a19f"]
}, Open  ]],
Cell[339125, 7033, 361, 7, 35, "Text",ExpressionUUID->"24a6c4ca-0f0c-4b8f-a12e-05d204188a17"],
Cell[CellGroupData[{
Cell[339511, 7044, 10117, 199, 360, "WolframAlphaShortInput",ExpressionUUID->"37eb6a1f-914b-438d-8c12-0ffc7fe2e4d9"],
Cell[349631, 7245, 172, 2, 34, "Output",ExpressionUUID->"e0c69144-202d-4c18-9b0e-d8fca12bdaf6"],
Cell[349806, 7249, 7729, 192, 49, "Output",ExpressionUUID->"d5c947b6-4832-4a6a-8242-4ec272157fd5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[357596, 7448, 250, 4, 67, "Section",ExpressionUUID->"629abf72-e852-4f15-87ba-7000a8cf9ac7"],
Cell[357849, 7454, 200, 3, 35, "Text",ExpressionUUID->"987f9554-893c-49c0-bc27-237f617aea54"],
Cell[CellGroupData[{
Cell[358074, 7461, 154, 3, 54, "Subsection",ExpressionUUID->"5a900361-76d0-4307-81f2-8da963fdc964"],
Cell[358231, 7466, 224, 4, 35, "Text",ExpressionUUID->"db032099-64e9-4112-a0bb-798c9ee6e023"],
Cell[CellGroupData[{
Cell[358480, 7474, 16290, 382, 72, "WolframAlphaShortInput",ExpressionUUID->"54536914-0a1a-4c8a-98d3-cbd71b98d11d"],
Cell[374773, 7858, 327, 7, 38, "Output",ExpressionUUID->"09328fec-078b-4a2c-b6f8-6f783227ad88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375137, 7870, 16544, 388, 72, "WolframAlphaShortInput",ExpressionUUID->"1f0eb806-58fb-4450-b44f-8806619ca903"],
Cell[391684, 8260, 249, 4, 36, "Output",ExpressionUUID->"a6416805-e910-409a-8a3a-36616e32c37c"]
}, Open  ]],
Cell[391948, 8267, 287, 4, 35, "Text",ExpressionUUID->"94448fa0-8c4d-430d-b766-afdd0c665cfe"],
Cell[CellGroupData[{
Cell[392260, 8275, 20980, 472, 72, "WolframAlphaShortInput",ExpressionUUID->"917900ee-f89c-4b83-9253-cdb55917f7a3"],
Cell[413243, 8749, 631, 16, 43, "Output",ExpressionUUID->"857dd8e9-d8de-424d-abd8-fdfd04419ac3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[413911, 8770, 12242, 245, 87, "WolframAlphaShortInput",ExpressionUUID->"2e450780-8ca4-4fa2-8aa9-7e4ac8932927"],
Cell[426156, 9017, 203, 3, 34, "Output",ExpressionUUID->"fbfaddf2-d044-4024-80b4-6139848538bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[426396, 9025, 220, 2, 41, "WolframAlphaLong",ExpressionUUID->"84175573-e196-4781-acd6-feb434530f94"],
Cell[426619, 9029, 26995, 544, 483, "Print",ExpressionUUID->"e19c020b-c27a-4ceb-a649-cf0dbd3db5e6"]
}, Open  ]],
Cell[453629, 9576, 229, 4, 35, "Text",ExpressionUUID->"5297277d-2397-41ac-8949-9ba403c50290"],
Cell[CellGroupData[{
Cell[453883, 9584, 19085, 449, 72, "WolframAlphaShortInput",ExpressionUUID->"932c4878-0f95-4a31-9eea-bda7c6e48790"],
Cell[472971, 10035, 244, 4, 36, "Output",ExpressionUUID->"7f171c96-b8ef-4eea-9897-b4561e2b1226"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

